{"title":"weex框架浅析","uid":"0c8fa70d5490d97115738363a2ade7ea","slug":"weex","date":"2022-01-24T08:08:07.333Z","updated":"2022-04-02T08:13:37.541Z","comments":true,"path":"api/articles/weex.json","keywords":null,"cover":"https://images.unsplash.com/photo-1535476593072-5a085be9f713?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8ODB8fGFuaW1hbCUyMGxvdmV8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60","content":"<h2 id=\"1-跨端框架\"><a href=\"#1-跨端框架\" class=\"headerlink\" title=\"1.跨端框架\"></a>1.跨端框架</h2><h3 id=\"react-native、fluter和weex\"><a href=\"#react-native、fluter和weex\" class=\"headerlink\" title=\"react-native、fluter和weex\"></a>react-native、fluter和weex</h3><p>React-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。</p>\n<p>Weex: js框架更类似于vue，其他架构与RN类似，也是通过bridge向安卓和ios发送消息实现api的调用</p>\n<p>flutter: 渲染不是基于操作系统的组件，而是直接基于绘图库（skia）来绘制的，这样做到了渲染的跨端。逻辑的跨端也不是基于 js 引擎，而是自研的 dart vm 来跨端，通过 dart 语言来写逻辑</p>\n<p>![image-20211009164255894](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211009164255894.png)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>Flutter</strong></th>\n<th><strong>React Native</strong></th>\n<th><strong>评价</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>编程语言</strong></td>\n<td>Dart</td>\n<td>JS</td>\n<td>JS语言生态更好  Dart学习成本也不高，支持JIT与AOT</td>\n</tr>\n<tr>\n<td>Native通信</td>\n<td>Skia</td>\n<td>JavaScript-bridge</td>\n<td>RN在UI渲染路径较长  Flutter渲染性能在路径上堪比原生</td>\n</tr>\n<tr>\n<td>UI组件与API</td>\n<td>SDK</td>\n<td>框架（framework）</td>\n<td>Flutter：Material &amp; Cupertino &amp; testing  &amp;  navigation、包的尺寸更大  RN：Dependent  on 3rd-party libraries</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-weex\"><a href=\"#2-weex\" class=\"headerlink\" title=\"2.weex\"></a>2.weex</h2><h3 id=\"总体的框架图\"><a href=\"#总体的框架图\" class=\"headerlink\" title=\"总体的框架图\"></a>总体的框架图</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b8881d8d894efea24ba411376361d8~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"img\"></p>\n<h3 id=\"weex-Jsfm\"><a href=\"#weex-Jsfm\" class=\"headerlink\" title=\"weex-Jsfm\"></a>weex-Jsfm</h3><p>从一个简单的weex文件来讲解weex-jsfm做了哪些处理</p>\n<p>打包前的文件</p>\n<p>首先可以看一下框架的目录结构</p>\n<p>![截屏2021-10-09 下午5.20.43](/Users/shuanghuili/Library/Application Support/typora-user-images/截屏2021-10-09 下午5.20.43.png)</p>\n<h4 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries\"></a>entries</h4><p>首先第一步为初始化前端框架（Vue，Vanilla，Rax和 Weex），注册前端全局方法供框架使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> freezePrototype <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./env'</span>\n<span class=\"token keyword\">import</span> setup <span class=\"token keyword\">from</span> <span class=\"token string\">'./setup'</span>\n<span class=\"token keyword\">import</span> frameworks <span class=\"token keyword\">from</span> <span class=\"token string\">'../frameworks'</span>\n\n<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>frameworks<span class=\"token punctuation\">)</span>\n<span class=\"token function\">freezePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再看下是如何setUp框架的呢，首先注册框架的信息，然后用init函数初始化框架的配置，最后将方法注册为全局API供框架使用。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">frameworks</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> init<span class=\"token punctuation\">,</span> config <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> runtime\n  config<span class=\"token punctuation\">.</span>frameworks <span class=\"token operator\">=</span> frameworks\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> native<span class=\"token punctuation\">,</span> transformer <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> subversion\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> serviceName <span class=\"token keyword\">in</span> services<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    runtime<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">[</span>serviceName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  runtime<span class=\"token punctuation\">.</span><span class=\"token function\">freezePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// register framework meta info</span>\n  global<span class=\"token punctuation\">.</span>frameworkVersion <span class=\"token operator\">=</span> native\n  global<span class=\"token punctuation\">.</span>transformerVersion <span class=\"token operator\">=</span> transformer\n\n  <span class=\"token comment\">// init frameworks</span>\n  <span class=\"token keyword\">const</span> globalMethods <span class=\"token operator\">=</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// set global methods</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> methodName <span class=\"token keyword\">in</span> globalMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    global<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> globalMethods<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">return</span> ret\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到setup函数使用init函数来初始化框架，而init函数中使用initTaskHandler函数，这个函数初始化任务处理中心的方法，是brige/TaskCenter.js中的init函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  runtimeConfig <span class=\"token operator\">=</span> config <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  frameworks <span class=\"token operator\">=</span> runtimeConfig<span class=\"token punctuation\">.</span>frameworks <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 初始化任务处理中心</span>\n  <span class=\"token function\">initTaskHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Init each framework by `init` method and `config` which contains three</span>\n  <span class=\"token comment\">// virtual-DOM Class: `Document`, `Element` &amp; `Comment`, and a JS bridge method:</span>\n  <span class=\"token comment\">// `sendTasks(...args)`.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">in</span> frameworks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> frameworks<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> framework<span class=\"token punctuation\">.</span>init <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        framework<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerComponents'</span><span class=\"token punctuation\">,</span> registerComponents<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerModules'</span><span class=\"token punctuation\">,</span> registerModules<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerMethods'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'destroyInstance'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'refreshInstance'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>genInstance<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> methods\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"brige\"><a href=\"#brige\" class=\"headerlink\" title=\"brige\"></a>brige</h4><p>js与native侧通信的桥梁</p>\n<p>这个函数为TaskCenter类的原型上挂载了诸多对外的方法，这些方法最终是调用的原生方法处理。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">DOM_METHODS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">createFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callCreateFinish<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateFinish<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">refreshFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRefreshFinish<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">createBody</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callCreateBody<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">addElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callAddElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">removeElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRemoveElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">moveElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callMoveElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateAttrs</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateAttrs<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateStyle</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateStyle<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">addEvent</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callAddEvent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">removeEvent</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRemoveEvent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">__updateComponentData</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>__updateComponentData\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token class-name\">TaskCenter</span><span class=\"token punctuation\">.</span>prototype\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">in</span> <span class=\"token constant\">DOM_METHODS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> <span class=\"token constant\">DOM_METHODS</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    proto<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> method <span class=\"token operator\">?</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token string\">'dom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  proto<span class=\"token punctuation\">.</span>componentHandler <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>callNativeComponent <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  proto<span class=\"token punctuation\">.</span>moduleHandler <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>callNativeModule <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> module<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后将这些方法应用到removeChild方法上，当我们调用元素removeChild方法的时候就会对应到taskCenter.send方法，讲需要发送的指令发送给客户端从而进行删除子元素的方法，而像这样写元素appendChild，insertBefore和insertAfter等方法的文件都在vdom文件夹里面。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n  * Remove a child node, and decide whether it should be destroyed.\n  * @param &#123;object&#125; node\n  * @param &#123;boolean&#125; preserved\n  */</span>\n <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeChild</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeChild</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> preserved</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pureChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">var</span> taskCenter <span class=\"token operator\">=</span> <span class=\"token function\">getTaskCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>docId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         taskCenter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n           <span class=\"token string\">'dom'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> <span class=\"token string\">'removeElement'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">]</span>\n         <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>preserved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     node<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h4><p>virtual dom的实现，其中包括注释节点、weex元素，浏览器的document，自定义element节点。例如原生weex节点，就是直接向客户端发送消息来注册该元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerElement</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> methods</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Skip when no special component methods.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>methods<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// Init constructor.</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeexElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Element</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// Add methods to prototype.</span>\n  methods<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">methodName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">WeexElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> taskCenter <span class=\"token operator\">=</span> <span class=\"token function\">getTaskCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>docId<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> taskCenter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'component'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> type<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> methodName\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<p>最后总结流程图如下</p>\n<p>以weex-vue-framework为例主要做了如下几件事：</p>\n<ol>\n<li><p>createInstanceContext</p>\n<p>创建实例，处理weex实例</p>\n</li>\n<li><p>createVueModuleInstance</p>\n<p>创建Vue实例，并做对weex的适配</p>\n</li>\n<li><p>挂载weex提供的api到Vue实例上，如document，taskCenter等</p>\n</li>\n<li><p>当vue生成虚拟dom的时候就可以直接调用挂载在实例上的方法，进行组件的创建，然后向桥发送消息由客户端最终进行组件的创建</p>\n</li>\n</ol>\n<p>![image-20211013194158430](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211013194158430.png)</p>\n","text":"1.跨端框架react-native、fluter和weexReact-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。 Weex: js框架更类似于vue，其...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"框架","slug":"框架","count":1,"path":"api/categories/框架.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%B7%A8%E7%AB%AF%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">1.跨端框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#react-native%E3%80%81fluter%E5%92%8Cweex\"><span class=\"toc-text\">react-native、fluter和weex</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-weex\"><span class=\"toc-text\">2.weex</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E4%BD%93%E7%9A%84%E6%A1%86%E6%9E%B6%E5%9B%BE\"><span class=\"toc-text\">总体的框架图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#weex-Jsfm\"><span class=\"toc-text\">weex-Jsfm</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#entries\"><span class=\"toc-text\">entries</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#brige\"><span class=\"toc-text\">brige</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#vdom\"><span class=\"toc-text\">vdom</span></a></li></ol></li></ol></li></ol>","author":{"name":"动物园园长","slug":"blog-author","avatar":"https://images.unsplash.com/photo-1616207787467-20787d4cbf8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjEzfHxhbmltYWwlMjBsb3ZlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60","link":"https://github.com/SkylarShuang","description":"喜欢代码的动物园园长🐒","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"vue nextTick的原理","uid":"2a112d259007295f8e773659e0f0b890","slug":"Vue nextTick的原理","date":"2022-04-01T12:06:02.451Z","updated":"2022-04-02T03:34:28.770Z","comments":true,"path":"api/articles/Vue nextTick的原理.json","keywords":null,"cover":"https://media.istockphoto.com/photos/dog-dreaming-picture-id1323095288?k=20&m=1323095288&s=612x612&w=0&h=ZC2DNmAcpDlMlNof1ojUXpItMhXggVfXFqnIZHU3NX4=","text":"Vue nextTick的原理使用方法在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM // 修改数据 vm.msg = 'Hello' // DOM 还没有更新 Vue.nextTick(function () &#123; /...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"}],"tags":[],"author":{"name":"动物园园长","slug":"blog-author","avatar":"https://images.unsplash.com/photo-1616207787467-20787d4cbf8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjEzfHxhbmltYWwlMjBsb3ZlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60","link":"https://github.com/SkylarShuang","description":"喜欢代码的动物园园长🐒","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}