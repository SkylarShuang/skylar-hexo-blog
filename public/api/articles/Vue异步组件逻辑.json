{"title":"Vue3异步组件的原理","uid":"83828ee736bf235d7180bde42e5f781a","slug":"Vue异步组件逻辑","date":"2022-04-01T12:15:39.521Z","updated":"2022-04-02T03:34:41.741Z","comments":true,"path":"api/articles/Vue异步组件逻辑.json","keywords":null,"cover":"https://images.unsplash.com/photo-1548802673-380ab8ebc7b7?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mjd8fGFuaW1hbCUyMGxvdmV8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60","content":"<p><a href=\"https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6\">首先请参考Vue异步组件的用法</a></p>\n<h2 id=\"1-用例分析\"><a href=\"#1-用例分析\" class=\"headerlink\" title=\"1.用例分析\"></a>1.用例分析</h2><p>此处写一个Vue异步组件的例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async-example'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 向 `resolve` 回调传递组件定义</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;div>I am async!&lt;/div>'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可见此处传入了两个参数，一个是组件的名字，一个是工厂函数，工厂函数接受两个参数（resolve， reject），工厂函数会收到一个<code>resolve</code>回调，这个回调函数会在你从服务器得到组件定义的时候被调用。也可以调用<code>reject(reason)</code>来表示加载失败。<br>不想这个异步组件实现的具体的逻辑，先考虑一下大方向：</p>\n<p>1.怎么判断这是一个异步组件</p>\n<p>2.在确定是异步组件以后，要调用异步函数来渲染和生成组件并将结果保存，并创建异步组件的占位符</p>\n<p>3.异步函数运行完以后，通过watcher来进行组件更新</p>\n<h2 id=\"2-具体逻辑解释\"><a href=\"#2-具体逻辑解释\" class=\"headerlink\" title=\"2.具体逻辑解释\"></a>2.具体逻辑解释</h2><p>如果不是html标签，都会进入到createComponent函数中来创建VNode节点，那么异步组件肯定会进入到该函数中，该函数做三件事情</p>\n<p>1）判断组件函数，然后进入不同的函数来进行相应的逻辑处理，如果传入的参数是对象，则通过Ctor = baseCtor.extend(Ctor)构造子类构造函数，如果是函数，说明传入的是异步组件，则进入到resolveAsyncComponent函数中</p>\n<p>2）安装组件的钩子函数</p>\n<p>3）通过以上函数完成相应组件的配置，从而根据这些配置来实例化VNode节点</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">Ctor<span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">,</span>\n        context<span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">,</span>\n        tag</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">var</span> baseCtor <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>_base<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自定义组件(异步组件除外)均会传入一个对象</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 构造子类构造函数</span>\n            Ctor <span class=\"token operator\">=</span> baseCtor<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 如果既不是对象也不是函数 则给出\"无效组件\"的提示</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Ctor <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Component definition: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">var</span> asyncFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过cid属性是否未定义来判断是否为异步组件</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">.</span>cid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            asyncFactory <span class=\"token operator\">=</span> Ctor<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 正式进入处理异步组件的函数</span>\n            Ctor <span class=\"token operator\">=</span> <span class=\"token function\">resolveAsyncComponent</span><span class=\"token punctuation\">(</span>asyncFactory<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ctor <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 创建异步组件的占位符</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">createAsyncPlaceholder</span><span class=\"token punctuation\">(</span>\n                    asyncFactory<span class=\"token punctuation\">,</span>\n                    data<span class=\"token punctuation\">,</span>\n                    context<span class=\"token punctuation\">,</span>\n                    children<span class=\"token punctuation\">,</span>\n                    tag\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 安装组件的钩子函数</span>\n        <span class=\"token function\">installComponentHooks</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// return a placeholder vnode</span>\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> Ctor<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> tag<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建VNode节点</span>\n        <span class=\"token keyword\">var</span> vnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token string\">\"vue-component-\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">.</span>cid<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">Ctor</span><span class=\"token operator\">:</span> Ctor<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">propsData</span><span class=\"token operator\">:</span> propsData<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">listeners</span><span class=\"token operator\">:</span> listeners<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> tag<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            asyncFactory\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> vnode\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于此处重点讲解异步组件的逻辑，那么就重点看下resolveAsyncComponent的逻辑，</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">resolveAsyncComponent</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">factory<span class=\"token punctuation\">,</span>\n        baseCtor</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>errorComp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span>errorComp\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// 此时返回缓存的组件</span>\n            <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span>resolved\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>owner <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>owners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">var</span> owners <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span>owners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> sync <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> timerLoading <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> timerTimeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n                <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hook:destroyed'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>owners<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">forceRender</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">renderCompleted</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> owners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token comment\">// 触发组件强制更新的函数</span>\n                    <span class=\"token punctuation\">(</span>owners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 保证resolve函数只运行一次</span>\n<span class=\"token keyword\">var</span> resolve <span class=\"token operator\">=</span> <span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 创建异步组件并保存在resolved中</span>\nfactory<span class=\"token punctuation\">.</span>resolved <span class=\"token operator\">=</span> <span class=\"token function\">ensureCtor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果不是同步的，则进行强制更新 </span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">forceRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    owners<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 保证reject函数只运行一次</span>\n            <span class=\"token keyword\">var</span> reject <span class=\"token operator\">=</span> <span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"Failed to resolve async component: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                    <span class=\"token punctuation\">(</span>reason <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nReason: \"</span> <span class=\"token operator\">+</span> reason<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 如果渲染错误切定义了加载失败的组件，则显示错误</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>errorComp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    factory<span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">forceRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//执行工厂函数(异步函数)</span>\n            <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果函数返回的结果为一个promise对象</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// () => Promise</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                     <span class=\"token comment\">// 如果加载成功运行定义的resolve函数</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> \n            <span class=\"token punctuation\">&#125;</span>\n            sync <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// return in case resolved synchronously</span>\n            <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span>loading\n                <span class=\"token operator\">?</span> factory<span class=\"token punctuation\">.</span>loadingComp\n                <span class=\"token operator\">:</span> factory<span class=\"token punctuation\">.</span>resolved\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可见以上写法的逻辑已经梳理完毕了，但是还有高级异步组件的写法如下:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AsyncComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 需要加载的组件 (应该是一个 `Promise` 对象)</span>\n  <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./MyComponent.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 异步组件加载时使用的组件</span>\n  <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> LoadingComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 加载失败时使用的组件</span>\n  <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> ErrorComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span>\n  <span class=\"token literal-property property\">delay</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 如果提供了超时时间且组件加载也超时了，</span>\n  <span class=\"token comment\">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span>\n  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到多了很多配置条件，可以在异步的不同状态下分别加载不同的页面，然后可以看一下Vue是怎么处理这一块的逻辑。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// () => Promise</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 如果component是promise对象</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//加载异步组件成功的话进入resolve回调，失败的话进入reject回调</span>\n    res<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 如果定义了error</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 调用ensureCtor方法传入错误组件和基本配置来创建组件并添加缓存</span>\n      factory<span class=\"token punctuation\">.</span>errorComp <span class=\"token operator\">=</span> <span class=\"token function\">ensureCtor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 如果定义了loading</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 创建loading组件并加入缓存</span>\n      factory<span class=\"token punctuation\">.</span>loadingComp <span class=\"token operator\">=</span> <span class=\"token function\">ensureCtor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 如果没有设置delay的时间，直接设置loading的状态为true</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        factory<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 如果有delay的话，就用setTimeout函数使得在多少时间后触发强制更新来渲染loading组件</span>\n        timerLoading <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          timerLoading <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            factory<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n            <span class=\"token comment\">// 强制更新并传入并未渲染完成的参数</span>\n            <span class=\"token function\">forceRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">||</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 如果定义了timeout</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      timerTimeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        timerTimeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 进入到reject回调函数 </span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout ('</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'ms)'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","feature":true,"text":"首先请参考Vue异步组件的用法 1.用例分析此处写一个Vue异步组件的例子： Vue.component('async-example', function (resolve, reject) &#123; setTimeout(function () &#123; // 向 `...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%94%A8%E4%BE%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">1.用例分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%85%B7%E4%BD%93%E9%80%BB%E8%BE%91%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">2.具体逻辑解释</span></a></li></ol>","author":{"name":"动物园园长","slug":"blog-author","avatar":"https://images.unsplash.com/photo-1616207787467-20787d4cbf8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjEzfHxhbmltYWwlMjBsb3ZlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60","link":"https://github.com/SkylarShuang","description":"喜欢代码的动物园园长🐒","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Vue3调试环境准备","uid":"88c311ebad772fb24ed33c5c5f934d02","slug":"Vue3调试环境准备","date":"2022-04-01T12:14:15.209Z","updated":"2022-04-02T09:36:38.546Z","comments":true,"path":"api/articles/Vue3调试环境准备.json","keywords":null,"cover":"https://images.unsplash.com/photo-1573865526739-10659fec78a5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8YW5pbWFsJTIwbG92ZXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60","text":"Vue3调试环境准备1.克隆Vue3的代码git clone https://github.com/vuejs/vue-next.git 2.安装依赖和打包yarn yarn dev yarn dev启动rollup将代码打包生成为vue.global.js，文件位置如图所示 !...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"}],"tags":[],"author":{"name":"动物园园长","slug":"blog-author","avatar":"https://images.unsplash.com/photo-1616207787467-20787d4cbf8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjEzfHxhbmltYWwlMjBsb3ZlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60","link":"https://github.com/SkylarShuang","description":"喜欢代码的动物园园长🐒","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}