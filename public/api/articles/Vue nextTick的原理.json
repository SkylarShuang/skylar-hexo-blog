{"title":"vue nextTick的原理","uid":"2a112d259007295f8e773659e0f0b890","slug":"Vue nextTick的原理","date":"2022-04-01T12:06:02.451Z","updated":"2022-04-02T03:34:28.770Z","comments":true,"path":"api/articles/Vue nextTick的原理.json","keywords":null,"cover":"https://media.istockphoto.com/photos/dog-dreaming-picture-id1323095288?k=20&m=1323095288&s=612x612&w=0&h=ZC2DNmAcpDlMlNof1ojUXpItMhXggVfXFqnIZHU3NX4=","content":"<h1 id=\"Vue-nextTick的原理\"><a href=\"#Vue-nextTick的原理\" class=\"headerlink\" title=\"Vue nextTick的原理\"></a>Vue nextTick的原理</h1><h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 修改数据</span>\nvm<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n<span class=\"token comment\">// DOM 还没有更新</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// DOM 更新了</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// DOM 更新了</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"源码逻辑\"><a href=\"#源码逻辑\" class=\"headerlink\" title=\"源码逻辑\"></a>源码逻辑</h2><p>  Vue.nextTick在src/core/util/nextTick.js文件中，可以通过源码看出这个逻辑为，首先将回调函数加入到flushCallbacks队列中，如果监测到pending（是否正在执行）为false，则触发timerFun函数，来运行flushCallbacks队列中的回调函数。由于flushCallbacks队列中的回调函数是需要在DOM更新后执行的，那么有几种方法来实现这个想法。</p>\n<p>1.可以把回调函数放在微任务或者宏任务中运行，那样在DOM更新后才会运行这些回调函数，Vue也是首先进行了平台是否支持Promise的判断，如果支持则用promise.then()来执行队列中的回调函数</p>\n<p>2.判断浏览器是否支持MutationObserver ，如果支持就用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\">MutationObserver</a>监测DOM的更新状态，此时也是有个比较巧妙的做法是，新建了一个文本节点，当运行timerFun函数时则改变这个文本节点的值，那样MutationObserver监测到以后就运行队列中的回调函数</p>\n<p>3.判断平台是否支持setImmediate函数，通过setImmediate函数运行队列中的回调函数</p>\n<p>4.如果都不支持，则使用setTimeout宏任务来更新队列函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* @flow */</span>\n<span class=\"token comment\">/* globals MutationObserver */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> noop <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'shared/util'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> handleError <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./error'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isIE<span class=\"token punctuation\">,</span> isIOS<span class=\"token punctuation\">,</span> isNative <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./env'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> isUsingMicroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">flushCallbacks</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">const</span> copies <span class=\"token operator\">=</span> callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  callbacks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> copies<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 执行队列中的回调函数</span>\n    copies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> timerFunc\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Promise <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 如果平台支持promise函数 则用promise执行任务队列</span>\n  <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isIOS<span class=\"token punctuation\">)</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>noop<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  isUsingMicroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isIE <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> MutationObserver <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 如果浏览器支持MutationObserver 则用MutationObserver监测DOM的更新状态</span>\n  <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>MutationObserver<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n  <span class=\"token comment\">// PhantomJS and iOS 7.x</span>\n  MutationObserver<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object MutationObserverConstructor]'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 在浏览器中新建一个文本节点，然后通过观测文本节点的变化来决定监测DOM的更新状态</span>\n  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> textNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">characterData</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span>\n    textNode<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  isUsingMicroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> setImmediate <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>setImmediate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 判断是否支持setImmediate函数</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 否则使用setTimeout来更新队列函数</span>\n  <span class=\"token comment\">// Fallback to setTimeout.</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">nextTick</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Function<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> _resolve\n  <span class=\"token comment\">// 把nextTick的回调函数加入到队列中，</span>\n  callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 执行回调函数</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">'nextTick'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">_resolve</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    pending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token function\">timerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 当未传入回调函数时，提供一个promise的调用</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cb <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> Promise <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      _resolve <span class=\"token operator\">=</span> resolve\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","feature":true,"text":"Vue nextTick的原理使用方法在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM // 修改数据 vm.msg = 'Hello' // DOM 还没有更新 Vue.nextTick(function () &#123; /...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Vue-nextTick%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Vue nextTick的原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">使用方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">源码逻辑</span></a></li></ol></li></ol>","author":{"name":"动物园园长","slug":"blog-author","avatar":"https://images.unsplash.com/photo-1616207787467-20787d4cbf8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjEzfHxhbmltYWwlMjBsb3ZlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60","link":"https://github.com/SkylarShuang","description":"喜欢代码的动物园园长🐒","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Vue3调试环境准备","uid":"88c311ebad772fb24ed33c5c5f934d02","slug":"Vue3调试环境准备","date":"2022-04-01T12:14:15.209Z","updated":"2022-04-02T03:35:18.558Z","comments":true,"path":"api/articles/Vue3调试环境准备.json","keywords":null,"cover":"https://images.unsplash.com/photo-1573865526739-10659fec78a5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8YW5pbWFsJTIwbG92ZXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60","text":"Vue3调试环境准备1.克隆Vue3的代码git clone https://github.com/vuejs/vue-next.git 2.安装依赖和打包yarn yarn dev yarn dev启动rollup将代码打包生成为vue.global.js，文件位置如图所示 !...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Vue","slug":"Vue","count":3,"path":"api/categories/Vue.json"}],"tags":[],"author":{"name":"动物园园长","slug":"blog-author","avatar":"https://images.unsplash.com/photo-1616207787467-20787d4cbf8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjEzfHxhbmltYWwlMjBsb3ZlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60","link":"https://github.com/SkylarShuang","description":"喜欢代码的动物园园长🐒","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"weex框架浅析","uid":"0c8fa70d5490d97115738363a2ade7ea","slug":"weex","date":"2022-01-24T08:08:07.333Z","updated":"2022-04-02T08:13:37.541Z","comments":true,"path":"api/articles/weex.json","keywords":null,"cover":"https://images.unsplash.com/photo-1535476593072-5a085be9f713?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8ODB8fGFuaW1hbCUyMGxvdmV8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60","text":"1.跨端框架react-native、fluter和weexReact-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。 Weex: js框架更类似于vue，其...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"框架","slug":"框架","count":1,"path":"api/categories/框架.json"}],"tags":[],"author":{"name":"动物园园长","slug":"blog-author","avatar":"https://images.unsplash.com/photo-1616207787467-20787d4cbf8a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjEzfHxhbmltYWwlMjBsb3ZlfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60","link":"https://github.com/SkylarShuang","description":"喜欢代码的动物园园长🐒","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}