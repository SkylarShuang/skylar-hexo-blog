{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"5227dfbedeb34efa27ed54bc24e077b68b290a59","modified":1648814636692},{"_id":"source/_posts/world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1643011708176},{"_id":"source/about/index.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1643013773623},{"_id":"source/_posts/weex.md","hash":"4d28ed785dd3b3e0005899e9b7c8034cd51c96d5","modified":1644478770232},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"26fe1515b7c6facad231e3457f9244584940b545","modified":1643014685706},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":499162500000},{"_id":"public/api/posts/1.json","hash":"ec5890c7fe3aac0bdd8618297c0eca5f47bc8806","modified":1644478653722},{"_id":"public/api/articles/world.json","hash":"44ae7d3566b8b21f4983235f104166794b40c913","modified":1644478653722},{"_id":"public/api/articles/weex.json","hash":"1538df881b739fae66768b2a7d2704b223af45a6","modified":1644478653722},{"_id":"public/api/articles/hello-world.json","hash":"05a772a8dfb59eb32be252e2ec33aeefec5f8331","modified":1644478653722},{"_id":"public/api/features.json","hash":"024925b00fc955d9539ce304b3b878a3e4785442","modified":1644478653722},{"_id":"public/api/authors/blog-author.json","hash":"f39bf87b19518c861ac0e8204bf7d32848045615","modified":1644478653722},{"_id":"public/api/site.json","hash":"0ba9a14b54346254cd5c83ba98beca84b6d3c0af","modified":1644478653722},{"_id":"public/api/categories.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1644478653722},{"_id":"public/api/tags.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1644478653722},{"_id":"public/api/pages/about/index.json","hash":"585c4c35374e910ae931af2f1c740b885d433e3f","modified":1644478653722},{"_id":"public/api/statistic.json","hash":"2445cb8edaca778085f806790a4ec415a73cc2c2","modified":1644478653722},{"_id":"public/api/search.json","hash":"0bfdf893932cebcfe598c5b3b0e37784821d7b6a","modified":1644478653722},{"_id":"public/post/world.html","hash":"65c2de398abac20e21a007c1d7abdf2ca3fd15b2","modified":1644478653722},{"_id":"public/post/weex.html","hash":"65c2de398abac20e21a007c1d7abdf2ca3fd15b2","modified":1644478653722},{"_id":"public/post/hello-world.html","hash":"65c2de398abac20e21a007c1d7abdf2ca3fd15b2","modified":1644478653722},{"_id":"public/index.html","hash":"65c2de398abac20e21a007c1d7abdf2ca3fd15b2","modified":1644478653722},{"_id":"public/tags/index.html","hash":"65c2de398abac20e21a007c1d7abdf2ca3fd15b2","modified":1644478653722},{"_id":"public/archives/index.html","hash":"65c2de398abac20e21a007c1d7abdf2ca3fd15b2","modified":1644478653722},{"_id":"public/page/about/index.html","hash":"65c2de398abac20e21a007c1d7abdf2ca3fd15b2","modified":1644478653722},{"_id":"public/tags/search/index.html","hash":"65c2de398abac20e21a007c1d7abdf2ca3fd15b2","modified":1644478653722},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1644478653722},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1644478653722},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1644478653722},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1644478653722},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1644478653722},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1644478653722},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1644478653722},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1644478653722},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1644478653722},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1644478653722},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1644478653722},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1644478653722},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1644478653722},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1644478653722},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1644478653722},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1644478653722},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1644478653722},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1644478653722},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1644478653722},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1644478653722},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1644478653722},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1644478653722},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1644478653722},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1644478653722},{"_id":"source/_posts/Vue nextTick的原理.md","hash":"d19e04a1ecfb4fa04aae910f3f9d24803579d1c1","modified":1648815204472},{"_id":"source/_posts/Vue异步组件逻辑.md","hash":"cb1bed09507b8f4bd5fb63b6826e6f46e1b9d77b","modified":1648815384222},{"_id":"source/_posts/Vue3调试环境准备.md","hash":"f450d8184bd0c1c4e8fa205f83ad66a963135b30","modified":1648815334347},{"_id":"source/_posts/weex copy.md","hash":"2631d869f7c7469bf8faadcabab1eed4fe0845c0","modified":1648815495297}],"Category":[],"Data":[],"Page":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"about/index.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","date":"2022-01-24T08:42:53.623Z","updated":"2022-01-24T08:42:53.623Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckzgo4qju0000euv6cfmjci0q","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"Post":[{"title":"自学前端进阶之路","cover":"https://images.unsplash.com/photo-1646854303811-43d6065917c2?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=584&q=80","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```        \n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: 自学前端进阶之路\ncover: \"https://images.unsplash.com/photo-1646854303811-43d6065917c2?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=584&q=80\"\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```        \n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-01-24T06:59:38.347Z","updated":"2022-04-01T12:03:56.692Z","_id":"ckzgo4qjx0001euv6a06s8o7z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server\n``<span class=\"token variable\"><span class=\"token variable\">`</span>        \n\nMore info: <span class=\"token punctuation\">[</span>Server<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://hexo.io/docs/server.html<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### Generate static files</span>\n\n<span class=\"token variable\">`</span></span>`` <span class=\"token function\">bash</span>\n$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server\n``<span class=\"token variable\"><span class=\"token variable\">`</span>        \n\nMore info: <span class=\"token punctuation\">[</span>Server<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://hexo.io/docs/server.html<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">### Generate static files</span>\n\n<span class=\"token variable\">`</span></span>`` <span class=\"token function\">bash</span>\n$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"weex框架浅析","_content":"\n## 1.跨端框架 \n\n### react-native、fluter和weex\n\nReact-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。\n\nWeex: js框架更类似于vue，其他架构与RN类似，也是通过bridge向安卓和ios发送消息实现api的调用\n\nflutter: 渲染不是基于操作系统的组件，而是直接基于绘图库（skia）来绘制的，这样做到了渲染的跨端。逻辑的跨端也不是基于 js 引擎，而是自研的 dart vm 来跨端，通过 dart 语言来写逻辑\n\n![image-20211009164255894](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211009164255894.png)\n\n\n\n|              | **Flutter** | **React Native**  | **评价**                                                     |\n| ------------ | ----------- | ----------------- | ------------------------------------------------------------ |\n| **编程语言** | Dart        | JS                | JS语言生态更好  Dart学习成本也不高，支持JIT与AOT             |\n| Native通信   | Skia        | JavaScript-bridge | RN在UI渲染路径较长  Flutter渲染性能在路径上堪比原生          |\n| UI组件与API  | SDK         | 框架（framework） | Flutter：Material & Cupertino & testing  &  navigation、包的尺寸更大  RN：Dependent  on 3rd-party libraries |\n|              |             |                   |                                                              |\n\n\n\n## 2.weex\n\n### 总体的框架图 \n\n![img](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b8881d8d894efea24ba411376361d8~tplv-k3u1fbpfcp-watermark.awebp)\n\n### weex-Jsfm\n\n从一个简单的weex文件来讲解weex-jsfm做了哪些处理\n\n打包前的文件\n\n首先可以看一下框架的目录结构\n\n![截屏2021-10-09 下午5.20.43](/Users/shuanghuili/Library/Application Support/typora-user-images/截屏2021-10-09 下午5.20.43.png)\n\n\n\n#### entries\n\n首先第一步为初始化前端框架（Vue，Vanilla，Rax和 Weex），注册前端全局方法供框架使用\n\n```javascript\nimport { freezePrototype } from './env'\nimport setup from './setup'\nimport frameworks from '../frameworks'\n\nsetup(frameworks)\nfreezePrototype()\n```\n\n再看下是如何setUp框架的呢，首先注册框架的信息，然后用init函数初始化框架的配置，最后将方法注册为全局API供框架使用。\n\n```js\nexport default function (frameworks) {\n  const { init, config } = runtime\n  config.frameworks = frameworks\n  const { native, transformer } = subversion\n\n  for (const serviceName in services) {\n    runtime.service.register(serviceName, services[serviceName])\n  }\n\n  runtime.freezePrototype()\n\n  // register framework meta info\n  global.frameworkVersion = native\n  global.transformerVersion = transformer\n\n  // init frameworks\n  const globalMethods = init(config)\n\n  // set global methods\n  for (const methodName in globalMethods) {\n    global[methodName] = (...args) => {\n      const ret = globalMethods[methodName](...args)\n      if (ret instanceof Error) {\n        console.error(ret.toString())\n      }\n      return ret\n    }\n  }\n}\n```\n\n可以看到setup函数使用init函数来初始化框架，而init函数中使用initTaskHandler函数，这个函数初始化任务处理中心的方法，是brige/TaskCenter.js中的init函数\n\n```javascript\nexport default function init (config) {\n  runtimeConfig = config || {}\n  frameworks = runtimeConfig.frameworks || {}\n  // 初始化任务处理中心\n  initTaskHandler()\n\n  // Init each framework by `init` method and `config` which contains three\n  // virtual-DOM Class: `Document`, `Element` & `Comment`, and a JS bridge method:\n  // `sendTasks(...args)`.\n  for (const name in frameworks) {\n    const framework = frameworks[name]\n    if (typeof framework.init === 'function') {\n      try {\n        framework.init(config)\n      }\n      catch (e) {}\n    }\n  }\n\n  adaptMethod('registerComponents', registerComponents)\n  adaptMethod('registerModules', registerModules)\n  adaptMethod('registerMethods')\n\n  ; ['destroyInstance', 'refreshInstance'].forEach(genInstance)\n\n  return methods\n}\n```\n\n#### brige \n\njs与native侧通信的桥梁\n\n这个函数为TaskCenter类的原型上挂载了诸多对外的方法，这些方法最终是调用的原生方法处理。\n\n```javascript\nexport function init () {\n  const DOM_METHODS = {\n    createFinish: global.callCreateFinish,\n    updateFinish: global.callUpdateFinish,\n    refreshFinish: global.callRefreshFinish,\n\n    createBody: global.callCreateBody,\n\n    addElement: global.callAddElement,\n    removeElement: global.callRemoveElement,\n    moveElement: global.callMoveElement,\n    updateAttrs: global.callUpdateAttrs,\n    updateStyle: global.callUpdateStyle,\n\n    addEvent: global.callAddEvent,\n    removeEvent: global.callRemoveEvent,\n    __updateComponentData: global.__updateComponentData\n  }\n  const proto = TaskCenter.prototype\n\n  for (const name in DOM_METHODS) {\n    const method = DOM_METHODS[name]\n    proto[name] = method ?\n      (id, args) => method(id, ...args) :\n      (id, args) => fallback(id, [{ module: 'dom', method: name, args }], '-1')\n  }\n\n  proto.componentHandler = global.callNativeComponent ||\n    ((id, ref, method, args, options) =>\n      fallback(id, [{ component: options.component, ref, method, args }]))\n\n  proto.moduleHandler = global.callNativeModule ||\n    ((id, module, method, args) =>\n      fallback(id, [{ module, method, args }]))\n}\n```\n\n然后将这些方法应用到removeChild方法上，当我们调用元素removeChild方法的时候就会对应到taskCenter.send方法，讲需要发送的指令发送给客户端从而进行删除子元素的方法，而像这样写元素appendChild，insertBefore和insertAfter等方法的文件都在vdom文件夹里面。\n\n```javascript\n /**\n   * Remove a child node, and decide whether it should be destroyed.\n   * @param {object} node\n   * @param {boolean} preserved\n   */\n  Element.prototype.removeChild = function removeChild (node, preserved) {\n    if (node.parentNode) {\n      removeIndex(node, this.children, true);\n      if (node.nodeType === 1) {\n        removeIndex(node, this.pureChildren);\n        var taskCenter = getTaskCenter(this.docId);\n        if (taskCenter) {\n          taskCenter.send(\n            'dom',\n            { action: 'removeElement' },\n            [node.ref]\n          );\n        }\n      }\n    }\n    if (!preserved) {\n      node.destroy();\n    }\n  };\n```\n\n#### vdom\n\nvirtual dom的实现，其中包括注释节点、weex元素，浏览器的document，自定义element节点。例如原生weex节点，就是直接向客户端发送消息来注册该元素。\n\n```javascript\nexport function registerElement (type, methods) {\n  // Skip when no special component methods.\n  if (!Array.isArray(methods) || !methods.length) {\n    return\n  }\n\n  // Init constructor.\n  class WeexElement extends Element {}\n\n  // Add methods to prototype.\n  methods.forEach(methodName => {\n    WeexElement.prototype[methodName] = function (...args) {\n      const taskCenter = getTaskCenter(this.docId)\n      if (taskCenter) {\n        return taskCenter.send('component', {\n          ref: this.ref,\n          component: type,\n          method: methodName\n        }, args)\n      }\n    }\n  })\n```\n\n\n\n\n最后总结流程图如下\n\n以weex-vue-framework为例主要做了如下几件事：\n\n1. createInstanceContext\n\n   创建实例，处理weex实例\n\n2. createVueModuleInstance\n\n   创建Vue实例，并做对weex的适配\n\n3. 挂载weex提供的api到Vue实例上，如document，taskCenter等\n\n4. 当vue生成虚拟dom的时候就可以直接调用挂载在实例上的方法，进行组件的创建，然后向桥发送消息由客户端最终进行组件的创建\n\n![image-20211013194158430](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211013194158430.png)\n\n","source":"_posts/weex.md","raw":"---\ntitle: weex框架浅析\n---\n\n## 1.跨端框架 \n\n### react-native、fluter和weex\n\nReact-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。\n\nWeex: js框架更类似于vue，其他架构与RN类似，也是通过bridge向安卓和ios发送消息实现api的调用\n\nflutter: 渲染不是基于操作系统的组件，而是直接基于绘图库（skia）来绘制的，这样做到了渲染的跨端。逻辑的跨端也不是基于 js 引擎，而是自研的 dart vm 来跨端，通过 dart 语言来写逻辑\n\n![image-20211009164255894](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211009164255894.png)\n\n\n\n|              | **Flutter** | **React Native**  | **评价**                                                     |\n| ------------ | ----------- | ----------------- | ------------------------------------------------------------ |\n| **编程语言** | Dart        | JS                | JS语言生态更好  Dart学习成本也不高，支持JIT与AOT             |\n| Native通信   | Skia        | JavaScript-bridge | RN在UI渲染路径较长  Flutter渲染性能在路径上堪比原生          |\n| UI组件与API  | SDK         | 框架（framework） | Flutter：Material & Cupertino & testing  &  navigation、包的尺寸更大  RN：Dependent  on 3rd-party libraries |\n|              |             |                   |                                                              |\n\n\n\n## 2.weex\n\n### 总体的框架图 \n\n![img](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b8881d8d894efea24ba411376361d8~tplv-k3u1fbpfcp-watermark.awebp)\n\n### weex-Jsfm\n\n从一个简单的weex文件来讲解weex-jsfm做了哪些处理\n\n打包前的文件\n\n首先可以看一下框架的目录结构\n\n![截屏2021-10-09 下午5.20.43](/Users/shuanghuili/Library/Application Support/typora-user-images/截屏2021-10-09 下午5.20.43.png)\n\n\n\n#### entries\n\n首先第一步为初始化前端框架（Vue，Vanilla，Rax和 Weex），注册前端全局方法供框架使用\n\n```javascript\nimport { freezePrototype } from './env'\nimport setup from './setup'\nimport frameworks from '../frameworks'\n\nsetup(frameworks)\nfreezePrototype()\n```\n\n再看下是如何setUp框架的呢，首先注册框架的信息，然后用init函数初始化框架的配置，最后将方法注册为全局API供框架使用。\n\n```js\nexport default function (frameworks) {\n  const { init, config } = runtime\n  config.frameworks = frameworks\n  const { native, transformer } = subversion\n\n  for (const serviceName in services) {\n    runtime.service.register(serviceName, services[serviceName])\n  }\n\n  runtime.freezePrototype()\n\n  // register framework meta info\n  global.frameworkVersion = native\n  global.transformerVersion = transformer\n\n  // init frameworks\n  const globalMethods = init(config)\n\n  // set global methods\n  for (const methodName in globalMethods) {\n    global[methodName] = (...args) => {\n      const ret = globalMethods[methodName](...args)\n      if (ret instanceof Error) {\n        console.error(ret.toString())\n      }\n      return ret\n    }\n  }\n}\n```\n\n可以看到setup函数使用init函数来初始化框架，而init函数中使用initTaskHandler函数，这个函数初始化任务处理中心的方法，是brige/TaskCenter.js中的init函数\n\n```javascript\nexport default function init (config) {\n  runtimeConfig = config || {}\n  frameworks = runtimeConfig.frameworks || {}\n  // 初始化任务处理中心\n  initTaskHandler()\n\n  // Init each framework by `init` method and `config` which contains three\n  // virtual-DOM Class: `Document`, `Element` & `Comment`, and a JS bridge method:\n  // `sendTasks(...args)`.\n  for (const name in frameworks) {\n    const framework = frameworks[name]\n    if (typeof framework.init === 'function') {\n      try {\n        framework.init(config)\n      }\n      catch (e) {}\n    }\n  }\n\n  adaptMethod('registerComponents', registerComponents)\n  adaptMethod('registerModules', registerModules)\n  adaptMethod('registerMethods')\n\n  ; ['destroyInstance', 'refreshInstance'].forEach(genInstance)\n\n  return methods\n}\n```\n\n#### brige \n\njs与native侧通信的桥梁\n\n这个函数为TaskCenter类的原型上挂载了诸多对外的方法，这些方法最终是调用的原生方法处理。\n\n```javascript\nexport function init () {\n  const DOM_METHODS = {\n    createFinish: global.callCreateFinish,\n    updateFinish: global.callUpdateFinish,\n    refreshFinish: global.callRefreshFinish,\n\n    createBody: global.callCreateBody,\n\n    addElement: global.callAddElement,\n    removeElement: global.callRemoveElement,\n    moveElement: global.callMoveElement,\n    updateAttrs: global.callUpdateAttrs,\n    updateStyle: global.callUpdateStyle,\n\n    addEvent: global.callAddEvent,\n    removeEvent: global.callRemoveEvent,\n    __updateComponentData: global.__updateComponentData\n  }\n  const proto = TaskCenter.prototype\n\n  for (const name in DOM_METHODS) {\n    const method = DOM_METHODS[name]\n    proto[name] = method ?\n      (id, args) => method(id, ...args) :\n      (id, args) => fallback(id, [{ module: 'dom', method: name, args }], '-1')\n  }\n\n  proto.componentHandler = global.callNativeComponent ||\n    ((id, ref, method, args, options) =>\n      fallback(id, [{ component: options.component, ref, method, args }]))\n\n  proto.moduleHandler = global.callNativeModule ||\n    ((id, module, method, args) =>\n      fallback(id, [{ module, method, args }]))\n}\n```\n\n然后将这些方法应用到removeChild方法上，当我们调用元素removeChild方法的时候就会对应到taskCenter.send方法，讲需要发送的指令发送给客户端从而进行删除子元素的方法，而像这样写元素appendChild，insertBefore和insertAfter等方法的文件都在vdom文件夹里面。\n\n```javascript\n /**\n   * Remove a child node, and decide whether it should be destroyed.\n   * @param {object} node\n   * @param {boolean} preserved\n   */\n  Element.prototype.removeChild = function removeChild (node, preserved) {\n    if (node.parentNode) {\n      removeIndex(node, this.children, true);\n      if (node.nodeType === 1) {\n        removeIndex(node, this.pureChildren);\n        var taskCenter = getTaskCenter(this.docId);\n        if (taskCenter) {\n          taskCenter.send(\n            'dom',\n            { action: 'removeElement' },\n            [node.ref]\n          );\n        }\n      }\n    }\n    if (!preserved) {\n      node.destroy();\n    }\n  };\n```\n\n#### vdom\n\nvirtual dom的实现，其中包括注释节点、weex元素，浏览器的document，自定义element节点。例如原生weex节点，就是直接向客户端发送消息来注册该元素。\n\n```javascript\nexport function registerElement (type, methods) {\n  // Skip when no special component methods.\n  if (!Array.isArray(methods) || !methods.length) {\n    return\n  }\n\n  // Init constructor.\n  class WeexElement extends Element {}\n\n  // Add methods to prototype.\n  methods.forEach(methodName => {\n    WeexElement.prototype[methodName] = function (...args) {\n      const taskCenter = getTaskCenter(this.docId)\n      if (taskCenter) {\n        return taskCenter.send('component', {\n          ref: this.ref,\n          component: type,\n          method: methodName\n        }, args)\n      }\n    }\n  })\n```\n\n\n\n\n最后总结流程图如下\n\n以weex-vue-framework为例主要做了如下几件事：\n\n1. createInstanceContext\n\n   创建实例，处理weex实例\n\n2. createVueModuleInstance\n\n   创建Vue实例，并做对weex的适配\n\n3. 挂载weex提供的api到Vue实例上，如document，taskCenter等\n\n4. 当vue生成虚拟dom的时候就可以直接调用挂载在实例上的方法，进行组件的创建，然后向桥发送消息由客户端最终进行组件的创建\n\n![image-20211013194158430](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211013194158430.png)\n\n","slug":"weex","published":1,"date":"2022-01-24T08:08:07.333Z","updated":"2022-02-10T07:39:30.232Z","_id":"ckzgo4qk60003euv673684sih","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-跨端框架\"><a href=\"#1-跨端框架\" class=\"headerlink\" title=\"1.跨端框架\"></a>1.跨端框架</h2><h3 id=\"react-native、fluter和weex\"><a href=\"#react-native、fluter和weex\" class=\"headerlink\" title=\"react-native、fluter和weex\"></a>react-native、fluter和weex</h3><p>React-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。</p>\n<p>Weex: js框架更类似于vue，其他架构与RN类似，也是通过bridge向安卓和ios发送消息实现api的调用</p>\n<p>flutter: 渲染不是基于操作系统的组件，而是直接基于绘图库（skia）来绘制的，这样做到了渲染的跨端。逻辑的跨端也不是基于 js 引擎，而是自研的 dart vm 来跨端，通过 dart 语言来写逻辑</p>\n<p>![image-20211009164255894](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211009164255894.png)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>Flutter</strong></th>\n<th><strong>React Native</strong></th>\n<th><strong>评价</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>编程语言</strong></td>\n<td>Dart</td>\n<td>JS</td>\n<td>JS语言生态更好  Dart学习成本也不高，支持JIT与AOT</td>\n</tr>\n<tr>\n<td>Native通信</td>\n<td>Skia</td>\n<td>JavaScript-bridge</td>\n<td>RN在UI渲染路径较长  Flutter渲染性能在路径上堪比原生</td>\n</tr>\n<tr>\n<td>UI组件与API</td>\n<td>SDK</td>\n<td>框架（framework）</td>\n<td>Flutter：Material &amp; Cupertino &amp; testing  &amp;  navigation、包的尺寸更大  RN：Dependent  on 3rd-party libraries</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-weex\"><a href=\"#2-weex\" class=\"headerlink\" title=\"2.weex\"></a>2.weex</h2><h3 id=\"总体的框架图\"><a href=\"#总体的框架图\" class=\"headerlink\" title=\"总体的框架图\"></a>总体的框架图</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b8881d8d894efea24ba411376361d8~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"img\"></p>\n<h3 id=\"weex-Jsfm\"><a href=\"#weex-Jsfm\" class=\"headerlink\" title=\"weex-Jsfm\"></a>weex-Jsfm</h3><p>从一个简单的weex文件来讲解weex-jsfm做了哪些处理</p>\n<p>打包前的文件</p>\n<p>首先可以看一下框架的目录结构</p>\n<p>![截屏2021-10-09 下午5.20.43](/Users/shuanghuili/Library/Application Support/typora-user-images/截屏2021-10-09 下午5.20.43.png)</p>\n<h4 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries\"></a>entries</h4><p>首先第一步为初始化前端框架（Vue，Vanilla，Rax和 Weex），注册前端全局方法供框架使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> freezePrototype <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./env'</span>\n<span class=\"token keyword\">import</span> setup <span class=\"token keyword\">from</span> <span class=\"token string\">'./setup'</span>\n<span class=\"token keyword\">import</span> frameworks <span class=\"token keyword\">from</span> <span class=\"token string\">'../frameworks'</span>\n\n<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>frameworks<span class=\"token punctuation\">)</span>\n<span class=\"token function\">freezePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再看下是如何setUp框架的呢，首先注册框架的信息，然后用init函数初始化框架的配置，最后将方法注册为全局API供框架使用。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">frameworks</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> init<span class=\"token punctuation\">,</span> config <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> runtime\n  config<span class=\"token punctuation\">.</span>frameworks <span class=\"token operator\">=</span> frameworks\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> native<span class=\"token punctuation\">,</span> transformer <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> subversion\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> serviceName <span class=\"token keyword\">in</span> services<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    runtime<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">[</span>serviceName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  runtime<span class=\"token punctuation\">.</span><span class=\"token function\">freezePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// register framework meta info</span>\n  global<span class=\"token punctuation\">.</span>frameworkVersion <span class=\"token operator\">=</span> native\n  global<span class=\"token punctuation\">.</span>transformerVersion <span class=\"token operator\">=</span> transformer\n\n  <span class=\"token comment\">// init frameworks</span>\n  <span class=\"token keyword\">const</span> globalMethods <span class=\"token operator\">=</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// set global methods</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> methodName <span class=\"token keyword\">in</span> globalMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    global<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> globalMethods<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">return</span> ret\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到setup函数使用init函数来初始化框架，而init函数中使用initTaskHandler函数，这个函数初始化任务处理中心的方法，是brige/TaskCenter.js中的init函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  runtimeConfig <span class=\"token operator\">=</span> config <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  frameworks <span class=\"token operator\">=</span> runtimeConfig<span class=\"token punctuation\">.</span>frameworks <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 初始化任务处理中心</span>\n  <span class=\"token function\">initTaskHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Init each framework by `init` method and `config` which contains three</span>\n  <span class=\"token comment\">// virtual-DOM Class: `Document`, `Element` &amp; `Comment`, and a JS bridge method:</span>\n  <span class=\"token comment\">// `sendTasks(...args)`.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">in</span> frameworks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> frameworks<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> framework<span class=\"token punctuation\">.</span>init <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        framework<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerComponents'</span><span class=\"token punctuation\">,</span> registerComponents<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerModules'</span><span class=\"token punctuation\">,</span> registerModules<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerMethods'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'destroyInstance'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'refreshInstance'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>genInstance<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> methods\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"brige\"><a href=\"#brige\" class=\"headerlink\" title=\"brige\"></a>brige</h4><p>js与native侧通信的桥梁</p>\n<p>这个函数为TaskCenter类的原型上挂载了诸多对外的方法，这些方法最终是调用的原生方法处理。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">DOM_METHODS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">createFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callCreateFinish<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateFinish<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">refreshFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRefreshFinish<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">createBody</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callCreateBody<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">addElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callAddElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">removeElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRemoveElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">moveElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callMoveElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateAttrs</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateAttrs<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateStyle</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateStyle<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">addEvent</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callAddEvent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">removeEvent</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRemoveEvent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">__updateComponentData</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>__updateComponentData\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token class-name\">TaskCenter</span><span class=\"token punctuation\">.</span>prototype\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">in</span> <span class=\"token constant\">DOM_METHODS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> <span class=\"token constant\">DOM_METHODS</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    proto<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> method <span class=\"token operator\">?</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token string\">'dom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  proto<span class=\"token punctuation\">.</span>componentHandler <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>callNativeComponent <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  proto<span class=\"token punctuation\">.</span>moduleHandler <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>callNativeModule <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> module<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后将这些方法应用到removeChild方法上，当我们调用元素removeChild方法的时候就会对应到taskCenter.send方法，讲需要发送的指令发送给客户端从而进行删除子元素的方法，而像这样写元素appendChild，insertBefore和insertAfter等方法的文件都在vdom文件夹里面。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n  * Remove a child node, and decide whether it should be destroyed.\n  * @param &#123;object&#125; node\n  * @param &#123;boolean&#125; preserved\n  */</span>\n <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeChild</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeChild</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> preserved</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pureChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">var</span> taskCenter <span class=\"token operator\">=</span> <span class=\"token function\">getTaskCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>docId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         taskCenter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n           <span class=\"token string\">'dom'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> <span class=\"token string\">'removeElement'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">]</span>\n         <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>preserved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     node<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h4><p>virtual dom的实现，其中包括注释节点、weex元素，浏览器的document，自定义element节点。例如原生weex节点，就是直接向客户端发送消息来注册该元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerElement</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> methods</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Skip when no special component methods.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>methods<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// Init constructor.</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeexElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Element</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// Add methods to prototype.</span>\n  methods<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">methodName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">WeexElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> taskCenter <span class=\"token operator\">=</span> <span class=\"token function\">getTaskCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>docId<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> taskCenter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'component'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> type<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> methodName\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<p>最后总结流程图如下</p>\n<p>以weex-vue-framework为例主要做了如下几件事：</p>\n<ol>\n<li><p>createInstanceContext</p>\n<p>创建实例，处理weex实例</p>\n</li>\n<li><p>createVueModuleInstance</p>\n<p>创建Vue实例，并做对weex的适配</p>\n</li>\n<li><p>挂载weex提供的api到Vue实例上，如document，taskCenter等</p>\n</li>\n<li><p>当vue生成虚拟dom的时候就可以直接调用挂载在实例上的方法，进行组件的创建，然后向桥发送消息由客户端最终进行组件的创建</p>\n</li>\n</ol>\n<p>![image-20211013194158430](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211013194158430.png)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-跨端框架\"><a href=\"#1-跨端框架\" class=\"headerlink\" title=\"1.跨端框架\"></a>1.跨端框架</h2><h3 id=\"react-native、fluter和weex\"><a href=\"#react-native、fluter和weex\" class=\"headerlink\" title=\"react-native、fluter和weex\"></a>react-native、fluter和weex</h3><p>React-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。</p>\n<p>Weex: js框架更类似于vue，其他架构与RN类似，也是通过bridge向安卓和ios发送消息实现api的调用</p>\n<p>flutter: 渲染不是基于操作系统的组件，而是直接基于绘图库（skia）来绘制的，这样做到了渲染的跨端。逻辑的跨端也不是基于 js 引擎，而是自研的 dart vm 来跨端，通过 dart 语言来写逻辑</p>\n<p>![image-20211009164255894](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211009164255894.png)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>Flutter</strong></th>\n<th><strong>React Native</strong></th>\n<th><strong>评价</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>编程语言</strong></td>\n<td>Dart</td>\n<td>JS</td>\n<td>JS语言生态更好  Dart学习成本也不高，支持JIT与AOT</td>\n</tr>\n<tr>\n<td>Native通信</td>\n<td>Skia</td>\n<td>JavaScript-bridge</td>\n<td>RN在UI渲染路径较长  Flutter渲染性能在路径上堪比原生</td>\n</tr>\n<tr>\n<td>UI组件与API</td>\n<td>SDK</td>\n<td>框架（framework）</td>\n<td>Flutter：Material &amp; Cupertino &amp; testing  &amp;  navigation、包的尺寸更大  RN：Dependent  on 3rd-party libraries</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-weex\"><a href=\"#2-weex\" class=\"headerlink\" title=\"2.weex\"></a>2.weex</h2><h3 id=\"总体的框架图\"><a href=\"#总体的框架图\" class=\"headerlink\" title=\"总体的框架图\"></a>总体的框架图</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b8881d8d894efea24ba411376361d8~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"img\"></p>\n<h3 id=\"weex-Jsfm\"><a href=\"#weex-Jsfm\" class=\"headerlink\" title=\"weex-Jsfm\"></a>weex-Jsfm</h3><p>从一个简单的weex文件来讲解weex-jsfm做了哪些处理</p>\n<p>打包前的文件</p>\n<p>首先可以看一下框架的目录结构</p>\n<p>![截屏2021-10-09 下午5.20.43](/Users/shuanghuili/Library/Application Support/typora-user-images/截屏2021-10-09 下午5.20.43.png)</p>\n<h4 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries\"></a>entries</h4><p>首先第一步为初始化前端框架（Vue，Vanilla，Rax和 Weex），注册前端全局方法供框架使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> freezePrototype <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./env'</span>\n<span class=\"token keyword\">import</span> setup <span class=\"token keyword\">from</span> <span class=\"token string\">'./setup'</span>\n<span class=\"token keyword\">import</span> frameworks <span class=\"token keyword\">from</span> <span class=\"token string\">'../frameworks'</span>\n\n<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>frameworks<span class=\"token punctuation\">)</span>\n<span class=\"token function\">freezePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再看下是如何setUp框架的呢，首先注册框架的信息，然后用init函数初始化框架的配置，最后将方法注册为全局API供框架使用。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">frameworks</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> init<span class=\"token punctuation\">,</span> config <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> runtime\n  config<span class=\"token punctuation\">.</span>frameworks <span class=\"token operator\">=</span> frameworks\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> native<span class=\"token punctuation\">,</span> transformer <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> subversion\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> serviceName <span class=\"token keyword\">in</span> services<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    runtime<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">[</span>serviceName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  runtime<span class=\"token punctuation\">.</span><span class=\"token function\">freezePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// register framework meta info</span>\n  global<span class=\"token punctuation\">.</span>frameworkVersion <span class=\"token operator\">=</span> native\n  global<span class=\"token punctuation\">.</span>transformerVersion <span class=\"token operator\">=</span> transformer\n\n  <span class=\"token comment\">// init frameworks</span>\n  <span class=\"token keyword\">const</span> globalMethods <span class=\"token operator\">=</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// set global methods</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> methodName <span class=\"token keyword\">in</span> globalMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    global<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> globalMethods<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">return</span> ret\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到setup函数使用init函数来初始化框架，而init函数中使用initTaskHandler函数，这个函数初始化任务处理中心的方法，是brige/TaskCenter.js中的init函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  runtimeConfig <span class=\"token operator\">=</span> config <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  frameworks <span class=\"token operator\">=</span> runtimeConfig<span class=\"token punctuation\">.</span>frameworks <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 初始化任务处理中心</span>\n  <span class=\"token function\">initTaskHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Init each framework by `init` method and `config` which contains three</span>\n  <span class=\"token comment\">// virtual-DOM Class: `Document`, `Element` &amp; `Comment`, and a JS bridge method:</span>\n  <span class=\"token comment\">// `sendTasks(...args)`.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">in</span> frameworks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> frameworks<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> framework<span class=\"token punctuation\">.</span>init <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        framework<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerComponents'</span><span class=\"token punctuation\">,</span> registerComponents<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerModules'</span><span class=\"token punctuation\">,</span> registerModules<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerMethods'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'destroyInstance'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'refreshInstance'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>genInstance<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> methods\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"brige\"><a href=\"#brige\" class=\"headerlink\" title=\"brige\"></a>brige</h4><p>js与native侧通信的桥梁</p>\n<p>这个函数为TaskCenter类的原型上挂载了诸多对外的方法，这些方法最终是调用的原生方法处理。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">DOM_METHODS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">createFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callCreateFinish<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateFinish<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">refreshFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRefreshFinish<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">createBody</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callCreateBody<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">addElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callAddElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">removeElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRemoveElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">moveElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callMoveElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateAttrs</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateAttrs<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateStyle</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateStyle<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">addEvent</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callAddEvent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">removeEvent</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRemoveEvent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">__updateComponentData</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>__updateComponentData\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token class-name\">TaskCenter</span><span class=\"token punctuation\">.</span>prototype\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">in</span> <span class=\"token constant\">DOM_METHODS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> <span class=\"token constant\">DOM_METHODS</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    proto<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> method <span class=\"token operator\">?</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token string\">'dom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  proto<span class=\"token punctuation\">.</span>componentHandler <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>callNativeComponent <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  proto<span class=\"token punctuation\">.</span>moduleHandler <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>callNativeModule <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> module<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后将这些方法应用到removeChild方法上，当我们调用元素removeChild方法的时候就会对应到taskCenter.send方法，讲需要发送的指令发送给客户端从而进行删除子元素的方法，而像这样写元素appendChild，insertBefore和insertAfter等方法的文件都在vdom文件夹里面。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n  * Remove a child node, and decide whether it should be destroyed.\n  * @param &#123;object&#125; node\n  * @param &#123;boolean&#125; preserved\n  */</span>\n <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeChild</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeChild</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> preserved</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pureChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">var</span> taskCenter <span class=\"token operator\">=</span> <span class=\"token function\">getTaskCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>docId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         taskCenter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n           <span class=\"token string\">'dom'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> <span class=\"token string\">'removeElement'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">]</span>\n         <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>preserved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     node<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h4><p>virtual dom的实现，其中包括注释节点、weex元素，浏览器的document，自定义element节点。例如原生weex节点，就是直接向客户端发送消息来注册该元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerElement</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> methods</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Skip when no special component methods.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>methods<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// Init constructor.</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeexElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Element</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// Add methods to prototype.</span>\n  methods<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">methodName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">WeexElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> taskCenter <span class=\"token operator\">=</span> <span class=\"token function\">getTaskCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>docId<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> taskCenter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'component'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> type<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> methodName\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<p>最后总结流程图如下</p>\n<p>以weex-vue-framework为例主要做了如下几件事：</p>\n<ol>\n<li><p>createInstanceContext</p>\n<p>创建实例，处理weex实例</p>\n</li>\n<li><p>createVueModuleInstance</p>\n<p>创建Vue实例，并做对weex的适配</p>\n</li>\n<li><p>挂载weex提供的api到Vue实例上，如document，taskCenter等</p>\n</li>\n<li><p>当vue生成虚拟dom的时候就可以直接调用挂载在实例上的方法，进行组件的创建，然后向桥发送消息由客户端最终进行组件的创建</p>\n</li>\n</ol>\n<p>![image-20211013194158430](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211013194158430.png)</p>\n"},{"title":"weex框架浅析","cover":"https://images.unsplash.com/photo-1535476593072-5a085be9f713?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8ODB8fGFuaW1hbCUyMGxvdmV8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60","_content":"\n## 1.跨端框架 \n\n### react-native、fluter和weex\n\nReact-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。\n\nWeex: js框架更类似于vue，其他架构与RN类似，也是通过bridge向安卓和ios发送消息实现api的调用\n\nflutter: 渲染不是基于操作系统的组件，而是直接基于绘图库（skia）来绘制的，这样做到了渲染的跨端。逻辑的跨端也不是基于 js 引擎，而是自研的 dart vm 来跨端，通过 dart 语言来写逻辑\n\n![image-20211009164255894](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211009164255894.png)\n\n\n\n|              | **Flutter** | **React Native**  | **评价**                                                     |\n| ------------ | ----------- | ----------------- | ------------------------------------------------------------ |\n| **编程语言** | Dart        | JS                | JS语言生态更好  Dart学习成本也不高，支持JIT与AOT             |\n| Native通信   | Skia        | JavaScript-bridge | RN在UI渲染路径较长  Flutter渲染性能在路径上堪比原生          |\n| UI组件与API  | SDK         | 框架（framework） | Flutter：Material & Cupertino & testing  &  navigation、包的尺寸更大  RN：Dependent  on 3rd-party libraries |\n|              |             |                   |                                                              |\n\n\n\n## 2.weex\n\n### 总体的框架图 \n\n![img](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b8881d8d894efea24ba411376361d8~tplv-k3u1fbpfcp-watermark.awebp)\n\n### weex-Jsfm\n\n从一个简单的weex文件来讲解weex-jsfm做了哪些处理\n\n打包前的文件\n\n首先可以看一下框架的目录结构\n\n![截屏2021-10-09 下午5.20.43](/Users/shuanghuili/Library/Application Support/typora-user-images/截屏2021-10-09 下午5.20.43.png)\n\n\n\n#### entries\n\n首先第一步为初始化前端框架（Vue，Vanilla，Rax和 Weex），注册前端全局方法供框架使用\n\n```javascript\nimport { freezePrototype } from './env'\nimport setup from './setup'\nimport frameworks from '../frameworks'\n\nsetup(frameworks)\nfreezePrototype()\n```\n\n再看下是如何setUp框架的呢，首先注册框架的信息，然后用init函数初始化框架的配置，最后将方法注册为全局API供框架使用。\n\n```js\nexport default function (frameworks) {\n  const { init, config } = runtime\n  config.frameworks = frameworks\n  const { native, transformer } = subversion\n\n  for (const serviceName in services) {\n    runtime.service.register(serviceName, services[serviceName])\n  }\n\n  runtime.freezePrototype()\n\n  // register framework meta info\n  global.frameworkVersion = native\n  global.transformerVersion = transformer\n\n  // init frameworks\n  const globalMethods = init(config)\n\n  // set global methods\n  for (const methodName in globalMethods) {\n    global[methodName] = (...args) => {\n      const ret = globalMethods[methodName](...args)\n      if (ret instanceof Error) {\n        console.error(ret.toString())\n      }\n      return ret\n    }\n  }\n}\n```\n\n可以看到setup函数使用init函数来初始化框架，而init函数中使用initTaskHandler函数，这个函数初始化任务处理中心的方法，是brige/TaskCenter.js中的init函数\n\n```javascript\nexport default function init (config) {\n  runtimeConfig = config || {}\n  frameworks = runtimeConfig.frameworks || {}\n  // 初始化任务处理中心\n  initTaskHandler()\n\n  // Init each framework by `init` method and `config` which contains three\n  // virtual-DOM Class: `Document`, `Element` & `Comment`, and a JS bridge method:\n  // `sendTasks(...args)`.\n  for (const name in frameworks) {\n    const framework = frameworks[name]\n    if (typeof framework.init === 'function') {\n      try {\n        framework.init(config)\n      }\n      catch (e) {}\n    }\n  }\n\n  adaptMethod('registerComponents', registerComponents)\n  adaptMethod('registerModules', registerModules)\n  adaptMethod('registerMethods')\n\n  ; ['destroyInstance', 'refreshInstance'].forEach(genInstance)\n\n  return methods\n}\n```\n\n#### brige \n\njs与native侧通信的桥梁\n\n这个函数为TaskCenter类的原型上挂载了诸多对外的方法，这些方法最终是调用的原生方法处理。\n\n```javascript\nexport function init () {\n  const DOM_METHODS = {\n    createFinish: global.callCreateFinish,\n    updateFinish: global.callUpdateFinish,\n    refreshFinish: global.callRefreshFinish,\n\n    createBody: global.callCreateBody,\n\n    addElement: global.callAddElement,\n    removeElement: global.callRemoveElement,\n    moveElement: global.callMoveElement,\n    updateAttrs: global.callUpdateAttrs,\n    updateStyle: global.callUpdateStyle,\n\n    addEvent: global.callAddEvent,\n    removeEvent: global.callRemoveEvent,\n    __updateComponentData: global.__updateComponentData\n  }\n  const proto = TaskCenter.prototype\n\n  for (const name in DOM_METHODS) {\n    const method = DOM_METHODS[name]\n    proto[name] = method ?\n      (id, args) => method(id, ...args) :\n      (id, args) => fallback(id, [{ module: 'dom', method: name, args }], '-1')\n  }\n\n  proto.componentHandler = global.callNativeComponent ||\n    ((id, ref, method, args, options) =>\n      fallback(id, [{ component: options.component, ref, method, args }]))\n\n  proto.moduleHandler = global.callNativeModule ||\n    ((id, module, method, args) =>\n      fallback(id, [{ module, method, args }]))\n}\n```\n\n然后将这些方法应用到removeChild方法上，当我们调用元素removeChild方法的时候就会对应到taskCenter.send方法，讲需要发送的指令发送给客户端从而进行删除子元素的方法，而像这样写元素appendChild，insertBefore和insertAfter等方法的文件都在vdom文件夹里面。\n\n```javascript\n /**\n   * Remove a child node, and decide whether it should be destroyed.\n   * @param {object} node\n   * @param {boolean} preserved\n   */\n  Element.prototype.removeChild = function removeChild (node, preserved) {\n    if (node.parentNode) {\n      removeIndex(node, this.children, true);\n      if (node.nodeType === 1) {\n        removeIndex(node, this.pureChildren);\n        var taskCenter = getTaskCenter(this.docId);\n        if (taskCenter) {\n          taskCenter.send(\n            'dom',\n            { action: 'removeElement' },\n            [node.ref]\n          );\n        }\n      }\n    }\n    if (!preserved) {\n      node.destroy();\n    }\n  };\n```\n\n#### vdom\n\nvirtual dom的实现，其中包括注释节点、weex元素，浏览器的document，自定义element节点。例如原生weex节点，就是直接向客户端发送消息来注册该元素。\n\n```javascript\nexport function registerElement (type, methods) {\n  // Skip when no special component methods.\n  if (!Array.isArray(methods) || !methods.length) {\n    return\n  }\n\n  // Init constructor.\n  class WeexElement extends Element {}\n\n  // Add methods to prototype.\n  methods.forEach(methodName => {\n    WeexElement.prototype[methodName] = function (...args) {\n      const taskCenter = getTaskCenter(this.docId)\n      if (taskCenter) {\n        return taskCenter.send('component', {\n          ref: this.ref,\n          component: type,\n          method: methodName\n        }, args)\n      }\n    }\n  })\n```\n\n\n\n\n最后总结流程图如下\n\n以weex-vue-framework为例主要做了如下几件事：\n\n1. createInstanceContext\n\n   创建实例，处理weex实例\n\n2. createVueModuleInstance\n\n   创建Vue实例，并做对weex的适配\n\n3. 挂载weex提供的api到Vue实例上，如document，taskCenter等\n\n4. 当vue生成虚拟dom的时候就可以直接调用挂载在实例上的方法，进行组件的创建，然后向桥发送消息由客户端最终进行组件的创建\n\n![image-20211013194158430](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211013194158430.png)\n\n","source":"_posts/weex copy.md","raw":"---\ntitle: weex框架浅析\ncover: \"https://images.unsplash.com/photo-1535476593072-5a085be9f713?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8ODB8fGFuaW1hbCUyMGxvdmV8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60\"\n---\n\n## 1.跨端框架 \n\n### react-native、fluter和weex\n\nReact-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。\n\nWeex: js框架更类似于vue，其他架构与RN类似，也是通过bridge向安卓和ios发送消息实现api的调用\n\nflutter: 渲染不是基于操作系统的组件，而是直接基于绘图库（skia）来绘制的，这样做到了渲染的跨端。逻辑的跨端也不是基于 js 引擎，而是自研的 dart vm 来跨端，通过 dart 语言来写逻辑\n\n![image-20211009164255894](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211009164255894.png)\n\n\n\n|              | **Flutter** | **React Native**  | **评价**                                                     |\n| ------------ | ----------- | ----------------- | ------------------------------------------------------------ |\n| **编程语言** | Dart        | JS                | JS语言生态更好  Dart学习成本也不高，支持JIT与AOT             |\n| Native通信   | Skia        | JavaScript-bridge | RN在UI渲染路径较长  Flutter渲染性能在路径上堪比原生          |\n| UI组件与API  | SDK         | 框架（framework） | Flutter：Material & Cupertino & testing  &  navigation、包的尺寸更大  RN：Dependent  on 3rd-party libraries |\n|              |             |                   |                                                              |\n\n\n\n## 2.weex\n\n### 总体的框架图 \n\n![img](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b8881d8d894efea24ba411376361d8~tplv-k3u1fbpfcp-watermark.awebp)\n\n### weex-Jsfm\n\n从一个简单的weex文件来讲解weex-jsfm做了哪些处理\n\n打包前的文件\n\n首先可以看一下框架的目录结构\n\n![截屏2021-10-09 下午5.20.43](/Users/shuanghuili/Library/Application Support/typora-user-images/截屏2021-10-09 下午5.20.43.png)\n\n\n\n#### entries\n\n首先第一步为初始化前端框架（Vue，Vanilla，Rax和 Weex），注册前端全局方法供框架使用\n\n```javascript\nimport { freezePrototype } from './env'\nimport setup from './setup'\nimport frameworks from '../frameworks'\n\nsetup(frameworks)\nfreezePrototype()\n```\n\n再看下是如何setUp框架的呢，首先注册框架的信息，然后用init函数初始化框架的配置，最后将方法注册为全局API供框架使用。\n\n```js\nexport default function (frameworks) {\n  const { init, config } = runtime\n  config.frameworks = frameworks\n  const { native, transformer } = subversion\n\n  for (const serviceName in services) {\n    runtime.service.register(serviceName, services[serviceName])\n  }\n\n  runtime.freezePrototype()\n\n  // register framework meta info\n  global.frameworkVersion = native\n  global.transformerVersion = transformer\n\n  // init frameworks\n  const globalMethods = init(config)\n\n  // set global methods\n  for (const methodName in globalMethods) {\n    global[methodName] = (...args) => {\n      const ret = globalMethods[methodName](...args)\n      if (ret instanceof Error) {\n        console.error(ret.toString())\n      }\n      return ret\n    }\n  }\n}\n```\n\n可以看到setup函数使用init函数来初始化框架，而init函数中使用initTaskHandler函数，这个函数初始化任务处理中心的方法，是brige/TaskCenter.js中的init函数\n\n```javascript\nexport default function init (config) {\n  runtimeConfig = config || {}\n  frameworks = runtimeConfig.frameworks || {}\n  // 初始化任务处理中心\n  initTaskHandler()\n\n  // Init each framework by `init` method and `config` which contains three\n  // virtual-DOM Class: `Document`, `Element` & `Comment`, and a JS bridge method:\n  // `sendTasks(...args)`.\n  for (const name in frameworks) {\n    const framework = frameworks[name]\n    if (typeof framework.init === 'function') {\n      try {\n        framework.init(config)\n      }\n      catch (e) {}\n    }\n  }\n\n  adaptMethod('registerComponents', registerComponents)\n  adaptMethod('registerModules', registerModules)\n  adaptMethod('registerMethods')\n\n  ; ['destroyInstance', 'refreshInstance'].forEach(genInstance)\n\n  return methods\n}\n```\n\n#### brige \n\njs与native侧通信的桥梁\n\n这个函数为TaskCenter类的原型上挂载了诸多对外的方法，这些方法最终是调用的原生方法处理。\n\n```javascript\nexport function init () {\n  const DOM_METHODS = {\n    createFinish: global.callCreateFinish,\n    updateFinish: global.callUpdateFinish,\n    refreshFinish: global.callRefreshFinish,\n\n    createBody: global.callCreateBody,\n\n    addElement: global.callAddElement,\n    removeElement: global.callRemoveElement,\n    moveElement: global.callMoveElement,\n    updateAttrs: global.callUpdateAttrs,\n    updateStyle: global.callUpdateStyle,\n\n    addEvent: global.callAddEvent,\n    removeEvent: global.callRemoveEvent,\n    __updateComponentData: global.__updateComponentData\n  }\n  const proto = TaskCenter.prototype\n\n  for (const name in DOM_METHODS) {\n    const method = DOM_METHODS[name]\n    proto[name] = method ?\n      (id, args) => method(id, ...args) :\n      (id, args) => fallback(id, [{ module: 'dom', method: name, args }], '-1')\n  }\n\n  proto.componentHandler = global.callNativeComponent ||\n    ((id, ref, method, args, options) =>\n      fallback(id, [{ component: options.component, ref, method, args }]))\n\n  proto.moduleHandler = global.callNativeModule ||\n    ((id, module, method, args) =>\n      fallback(id, [{ module, method, args }]))\n}\n```\n\n然后将这些方法应用到removeChild方法上，当我们调用元素removeChild方法的时候就会对应到taskCenter.send方法，讲需要发送的指令发送给客户端从而进行删除子元素的方法，而像这样写元素appendChild，insertBefore和insertAfter等方法的文件都在vdom文件夹里面。\n\n```javascript\n /**\n   * Remove a child node, and decide whether it should be destroyed.\n   * @param {object} node\n   * @param {boolean} preserved\n   */\n  Element.prototype.removeChild = function removeChild (node, preserved) {\n    if (node.parentNode) {\n      removeIndex(node, this.children, true);\n      if (node.nodeType === 1) {\n        removeIndex(node, this.pureChildren);\n        var taskCenter = getTaskCenter(this.docId);\n        if (taskCenter) {\n          taskCenter.send(\n            'dom',\n            { action: 'removeElement' },\n            [node.ref]\n          );\n        }\n      }\n    }\n    if (!preserved) {\n      node.destroy();\n    }\n  };\n```\n\n#### vdom\n\nvirtual dom的实现，其中包括注释节点、weex元素，浏览器的document，自定义element节点。例如原生weex节点，就是直接向客户端发送消息来注册该元素。\n\n```javascript\nexport function registerElement (type, methods) {\n  // Skip when no special component methods.\n  if (!Array.isArray(methods) || !methods.length) {\n    return\n  }\n\n  // Init constructor.\n  class WeexElement extends Element {}\n\n  // Add methods to prototype.\n  methods.forEach(methodName => {\n    WeexElement.prototype[methodName] = function (...args) {\n      const taskCenter = getTaskCenter(this.docId)\n      if (taskCenter) {\n        return taskCenter.send('component', {\n          ref: this.ref,\n          component: type,\n          method: methodName\n        }, args)\n      }\n    }\n  })\n```\n\n\n\n\n最后总结流程图如下\n\n以weex-vue-framework为例主要做了如下几件事：\n\n1. createInstanceContext\n\n   创建实例，处理weex实例\n\n2. createVueModuleInstance\n\n   创建Vue实例，并做对weex的适配\n\n3. 挂载weex提供的api到Vue实例上，如document，taskCenter等\n\n4. 当vue生成虚拟dom的时候就可以直接调用挂载在实例上的方法，进行组件的创建，然后向桥发送消息由客户端最终进行组件的创建\n\n![image-20211013194158430](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211013194158430.png)\n\n","slug":"weex copy","published":1,"date":"2022-04-01T12:05:07.284Z","updated":"2022-04-01T12:18:15.297Z","_id":"cl1gdpeoh00005av691sk731x","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-跨端框架\"><a href=\"#1-跨端框架\" class=\"headerlink\" title=\"1.跨端框架\"></a>1.跨端框架</h2><h3 id=\"react-native、fluter和weex\"><a href=\"#react-native、fluter和weex\" class=\"headerlink\" title=\"react-native、fluter和weex\"></a>react-native、fluter和weex</h3><p>React-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。</p>\n<p>Weex: js框架更类似于vue，其他架构与RN类似，也是通过bridge向安卓和ios发送消息实现api的调用</p>\n<p>flutter: 渲染不是基于操作系统的组件，而是直接基于绘图库（skia）来绘制的，这样做到了渲染的跨端。逻辑的跨端也不是基于 js 引擎，而是自研的 dart vm 来跨端，通过 dart 语言来写逻辑</p>\n<p>![image-20211009164255894](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211009164255894.png)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>Flutter</strong></th>\n<th><strong>React Native</strong></th>\n<th><strong>评价</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>编程语言</strong></td>\n<td>Dart</td>\n<td>JS</td>\n<td>JS语言生态更好  Dart学习成本也不高，支持JIT与AOT</td>\n</tr>\n<tr>\n<td>Native通信</td>\n<td>Skia</td>\n<td>JavaScript-bridge</td>\n<td>RN在UI渲染路径较长  Flutter渲染性能在路径上堪比原生</td>\n</tr>\n<tr>\n<td>UI组件与API</td>\n<td>SDK</td>\n<td>框架（framework）</td>\n<td>Flutter：Material &amp; Cupertino &amp; testing  &amp;  navigation、包的尺寸更大  RN：Dependent  on 3rd-party libraries</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-weex\"><a href=\"#2-weex\" class=\"headerlink\" title=\"2.weex\"></a>2.weex</h2><h3 id=\"总体的框架图\"><a href=\"#总体的框架图\" class=\"headerlink\" title=\"总体的框架图\"></a>总体的框架图</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b8881d8d894efea24ba411376361d8~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"img\"></p>\n<h3 id=\"weex-Jsfm\"><a href=\"#weex-Jsfm\" class=\"headerlink\" title=\"weex-Jsfm\"></a>weex-Jsfm</h3><p>从一个简单的weex文件来讲解weex-jsfm做了哪些处理</p>\n<p>打包前的文件</p>\n<p>首先可以看一下框架的目录结构</p>\n<p>![截屏2021-10-09 下午5.20.43](/Users/shuanghuili/Library/Application Support/typora-user-images/截屏2021-10-09 下午5.20.43.png)</p>\n<h4 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries\"></a>entries</h4><p>首先第一步为初始化前端框架（Vue，Vanilla，Rax和 Weex），注册前端全局方法供框架使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> freezePrototype <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./env'</span>\n<span class=\"token keyword\">import</span> setup <span class=\"token keyword\">from</span> <span class=\"token string\">'./setup'</span>\n<span class=\"token keyword\">import</span> frameworks <span class=\"token keyword\">from</span> <span class=\"token string\">'../frameworks'</span>\n\n<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>frameworks<span class=\"token punctuation\">)</span>\n<span class=\"token function\">freezePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再看下是如何setUp框架的呢，首先注册框架的信息，然后用init函数初始化框架的配置，最后将方法注册为全局API供框架使用。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">frameworks</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> init<span class=\"token punctuation\">,</span> config <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> runtime\n  config<span class=\"token punctuation\">.</span>frameworks <span class=\"token operator\">=</span> frameworks\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> native<span class=\"token punctuation\">,</span> transformer <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> subversion\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> serviceName <span class=\"token keyword\">in</span> services<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    runtime<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">[</span>serviceName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  runtime<span class=\"token punctuation\">.</span><span class=\"token function\">freezePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// register framework meta info</span>\n  global<span class=\"token punctuation\">.</span>frameworkVersion <span class=\"token operator\">=</span> native\n  global<span class=\"token punctuation\">.</span>transformerVersion <span class=\"token operator\">=</span> transformer\n\n  <span class=\"token comment\">// init frameworks</span>\n  <span class=\"token keyword\">const</span> globalMethods <span class=\"token operator\">=</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// set global methods</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> methodName <span class=\"token keyword\">in</span> globalMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    global<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> globalMethods<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">return</span> ret\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到setup函数使用init函数来初始化框架，而init函数中使用initTaskHandler函数，这个函数初始化任务处理中心的方法，是brige/TaskCenter.js中的init函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  runtimeConfig <span class=\"token operator\">=</span> config <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  frameworks <span class=\"token operator\">=</span> runtimeConfig<span class=\"token punctuation\">.</span>frameworks <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 初始化任务处理中心</span>\n  <span class=\"token function\">initTaskHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Init each framework by `init` method and `config` which contains three</span>\n  <span class=\"token comment\">// virtual-DOM Class: `Document`, `Element` &amp; `Comment`, and a JS bridge method:</span>\n  <span class=\"token comment\">// `sendTasks(...args)`.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">in</span> frameworks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> frameworks<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> framework<span class=\"token punctuation\">.</span>init <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        framework<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerComponents'</span><span class=\"token punctuation\">,</span> registerComponents<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerModules'</span><span class=\"token punctuation\">,</span> registerModules<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerMethods'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'destroyInstance'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'refreshInstance'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>genInstance<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> methods\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"brige\"><a href=\"#brige\" class=\"headerlink\" title=\"brige\"></a>brige</h4><p>js与native侧通信的桥梁</p>\n<p>这个函数为TaskCenter类的原型上挂载了诸多对外的方法，这些方法最终是调用的原生方法处理。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">DOM_METHODS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">createFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callCreateFinish<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateFinish<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">refreshFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRefreshFinish<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">createBody</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callCreateBody<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">addElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callAddElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">removeElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRemoveElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">moveElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callMoveElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateAttrs</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateAttrs<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateStyle</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateStyle<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">addEvent</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callAddEvent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">removeEvent</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRemoveEvent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">__updateComponentData</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>__updateComponentData\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token class-name\">TaskCenter</span><span class=\"token punctuation\">.</span>prototype\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">in</span> <span class=\"token constant\">DOM_METHODS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> <span class=\"token constant\">DOM_METHODS</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    proto<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> method <span class=\"token operator\">?</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token string\">'dom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  proto<span class=\"token punctuation\">.</span>componentHandler <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>callNativeComponent <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  proto<span class=\"token punctuation\">.</span>moduleHandler <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>callNativeModule <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> module<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后将这些方法应用到removeChild方法上，当我们调用元素removeChild方法的时候就会对应到taskCenter.send方法，讲需要发送的指令发送给客户端从而进行删除子元素的方法，而像这样写元素appendChild，insertBefore和insertAfter等方法的文件都在vdom文件夹里面。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n  * Remove a child node, and decide whether it should be destroyed.\n  * @param &#123;object&#125; node\n  * @param &#123;boolean&#125; preserved\n  */</span>\n <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeChild</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeChild</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> preserved</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pureChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">var</span> taskCenter <span class=\"token operator\">=</span> <span class=\"token function\">getTaskCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>docId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         taskCenter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n           <span class=\"token string\">'dom'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> <span class=\"token string\">'removeElement'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">]</span>\n         <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>preserved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     node<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h4><p>virtual dom的实现，其中包括注释节点、weex元素，浏览器的document，自定义element节点。例如原生weex节点，就是直接向客户端发送消息来注册该元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerElement</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> methods</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Skip when no special component methods.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>methods<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// Init constructor.</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeexElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Element</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// Add methods to prototype.</span>\n  methods<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">methodName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">WeexElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> taskCenter <span class=\"token operator\">=</span> <span class=\"token function\">getTaskCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>docId<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> taskCenter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'component'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> type<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> methodName\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<p>最后总结流程图如下</p>\n<p>以weex-vue-framework为例主要做了如下几件事：</p>\n<ol>\n<li><p>createInstanceContext</p>\n<p>创建实例，处理weex实例</p>\n</li>\n<li><p>createVueModuleInstance</p>\n<p>创建Vue实例，并做对weex的适配</p>\n</li>\n<li><p>挂载weex提供的api到Vue实例上，如document，taskCenter等</p>\n</li>\n<li><p>当vue生成虚拟dom的时候就可以直接调用挂载在实例上的方法，进行组件的创建，然后向桥发送消息由客户端最终进行组件的创建</p>\n</li>\n</ol>\n<p>![image-20211013194158430](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211013194158430.png)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-跨端框架\"><a href=\"#1-跨端框架\" class=\"headerlink\" title=\"1.跨端框架\"></a>1.跨端框架</h2><h3 id=\"react-native、fluter和weex\"><a href=\"#react-native、fluter和weex\" class=\"headerlink\" title=\"react-native、fluter和weex\"></a>react-native、fluter和weex</h3><p>React-native: 基于 js 引擎，通过 bridge 注入一些设备能力的 api，而渲染跨端则是使用安卓、ios 实现 react 的 virtual dom 的渲染。</p>\n<p>Weex: js框架更类似于vue，其他架构与RN类似，也是通过bridge向安卓和ios发送消息实现api的调用</p>\n<p>flutter: 渲染不是基于操作系统的组件，而是直接基于绘图库（skia）来绘制的，这样做到了渲染的跨端。逻辑的跨端也不是基于 js 引擎，而是自研的 dart vm 来跨端，通过 dart 语言来写逻辑</p>\n<p>![image-20211009164255894](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211009164255894.png)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>Flutter</strong></th>\n<th><strong>React Native</strong></th>\n<th><strong>评价</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>编程语言</strong></td>\n<td>Dart</td>\n<td>JS</td>\n<td>JS语言生态更好  Dart学习成本也不高，支持JIT与AOT</td>\n</tr>\n<tr>\n<td>Native通信</td>\n<td>Skia</td>\n<td>JavaScript-bridge</td>\n<td>RN在UI渲染路径较长  Flutter渲染性能在路径上堪比原生</td>\n</tr>\n<tr>\n<td>UI组件与API</td>\n<td>SDK</td>\n<td>框架（framework）</td>\n<td>Flutter：Material &amp; Cupertino &amp; testing  &amp;  navigation、包的尺寸更大  RN：Dependent  on 3rd-party libraries</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-weex\"><a href=\"#2-weex\" class=\"headerlink\" title=\"2.weex\"></a>2.weex</h2><h3 id=\"总体的框架图\"><a href=\"#总体的框架图\" class=\"headerlink\" title=\"总体的框架图\"></a>总体的框架图</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b8881d8d894efea24ba411376361d8~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"img\"></p>\n<h3 id=\"weex-Jsfm\"><a href=\"#weex-Jsfm\" class=\"headerlink\" title=\"weex-Jsfm\"></a>weex-Jsfm</h3><p>从一个简单的weex文件来讲解weex-jsfm做了哪些处理</p>\n<p>打包前的文件</p>\n<p>首先可以看一下框架的目录结构</p>\n<p>![截屏2021-10-09 下午5.20.43](/Users/shuanghuili/Library/Application Support/typora-user-images/截屏2021-10-09 下午5.20.43.png)</p>\n<h4 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries\"></a>entries</h4><p>首先第一步为初始化前端框架（Vue，Vanilla，Rax和 Weex），注册前端全局方法供框架使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> freezePrototype <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./env'</span>\n<span class=\"token keyword\">import</span> setup <span class=\"token keyword\">from</span> <span class=\"token string\">'./setup'</span>\n<span class=\"token keyword\">import</span> frameworks <span class=\"token keyword\">from</span> <span class=\"token string\">'../frameworks'</span>\n\n<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>frameworks<span class=\"token punctuation\">)</span>\n<span class=\"token function\">freezePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再看下是如何setUp框架的呢，首先注册框架的信息，然后用init函数初始化框架的配置，最后将方法注册为全局API供框架使用。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">frameworks</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> init<span class=\"token punctuation\">,</span> config <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> runtime\n  config<span class=\"token punctuation\">.</span>frameworks <span class=\"token operator\">=</span> frameworks\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> native<span class=\"token punctuation\">,</span> transformer <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> subversion\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> serviceName <span class=\"token keyword\">in</span> services<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    runtime<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">[</span>serviceName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  runtime<span class=\"token punctuation\">.</span><span class=\"token function\">freezePrototype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// register framework meta info</span>\n  global<span class=\"token punctuation\">.</span>frameworkVersion <span class=\"token operator\">=</span> native\n  global<span class=\"token punctuation\">.</span>transformerVersion <span class=\"token operator\">=</span> transformer\n\n  <span class=\"token comment\">// init frameworks</span>\n  <span class=\"token keyword\">const</span> globalMethods <span class=\"token operator\">=</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// set global methods</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> methodName <span class=\"token keyword\">in</span> globalMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    global<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> globalMethods<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">return</span> ret\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到setup函数使用init函数来初始化框架，而init函数中使用initTaskHandler函数，这个函数初始化任务处理中心的方法，是brige/TaskCenter.js中的init函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  runtimeConfig <span class=\"token operator\">=</span> config <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  frameworks <span class=\"token operator\">=</span> runtimeConfig<span class=\"token punctuation\">.</span>frameworks <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 初始化任务处理中心</span>\n  <span class=\"token function\">initTaskHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Init each framework by `init` method and `config` which contains three</span>\n  <span class=\"token comment\">// virtual-DOM Class: `Document`, `Element` &amp; `Comment`, and a JS bridge method:</span>\n  <span class=\"token comment\">// `sendTasks(...args)`.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">in</span> frameworks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> frameworks<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> framework<span class=\"token punctuation\">.</span>init <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        framework<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerComponents'</span><span class=\"token punctuation\">,</span> registerComponents<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerModules'</span><span class=\"token punctuation\">,</span> registerModules<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">adaptMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'registerMethods'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'destroyInstance'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'refreshInstance'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>genInstance<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> methods\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"brige\"><a href=\"#brige\" class=\"headerlink\" title=\"brige\"></a>brige</h4><p>js与native侧通信的桥梁</p>\n<p>这个函数为TaskCenter类的原型上挂载了诸多对外的方法，这些方法最终是调用的原生方法处理。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">DOM_METHODS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">createFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callCreateFinish<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateFinish<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">refreshFinish</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRefreshFinish<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">createBody</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callCreateBody<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">addElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callAddElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">removeElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRemoveElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">moveElement</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callMoveElement<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateAttrs</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateAttrs<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">updateStyle</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callUpdateStyle<span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">addEvent</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callAddEvent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">removeEvent</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>callRemoveEvent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">__updateComponentData</span><span class=\"token operator\">:</span> global<span class=\"token punctuation\">.</span>__updateComponentData\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token class-name\">TaskCenter</span><span class=\"token punctuation\">.</span>prototype\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">in</span> <span class=\"token constant\">DOM_METHODS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> <span class=\"token constant\">DOM_METHODS</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    proto<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> method <span class=\"token operator\">?</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token string\">'dom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  proto<span class=\"token punctuation\">.</span>componentHandler <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>callNativeComponent <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> options<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  proto<span class=\"token punctuation\">.</span>moduleHandler <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>callNativeModule <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> module<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后将这些方法应用到removeChild方法上，当我们调用元素removeChild方法的时候就会对应到taskCenter.send方法，讲需要发送的指令发送给客户端从而进行删除子元素的方法，而像这样写元素appendChild，insertBefore和insertAfter等方法的文件都在vdom文件夹里面。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n  * Remove a child node, and decide whether it should be destroyed.\n  * @param &#123;object&#125; node\n  * @param &#123;boolean&#125; preserved\n  */</span>\n <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeChild</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">removeChild</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> preserved</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pureChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">var</span> taskCenter <span class=\"token operator\">=</span> <span class=\"token function\">getTaskCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>docId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         taskCenter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n           <span class=\"token string\">'dom'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> <span class=\"token string\">'removeElement'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">]</span>\n         <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>preserved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     node<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h4><p>virtual dom的实现，其中包括注释节点、weex元素，浏览器的document，自定义element节点。例如原生weex节点，就是直接向客户端发送消息来注册该元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerElement</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> methods</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Skip when no special component methods.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>methods<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// Init constructor.</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeexElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Element</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// Add methods to prototype.</span>\n  methods<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">methodName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">WeexElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> taskCenter <span class=\"token operator\">=</span> <span class=\"token function\">getTaskCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>docId<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> taskCenter<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'component'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> type<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> methodName\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<p>最后总结流程图如下</p>\n<p>以weex-vue-framework为例主要做了如下几件事：</p>\n<ol>\n<li><p>createInstanceContext</p>\n<p>创建实例，处理weex实例</p>\n</li>\n<li><p>createVueModuleInstance</p>\n<p>创建Vue实例，并做对weex的适配</p>\n</li>\n<li><p>挂载weex提供的api到Vue实例上，如document，taskCenter等</p>\n</li>\n<li><p>当vue生成虚拟dom的时候就可以直接调用挂载在实例上的方法，进行组件的创建，然后向桥发送消息由客户端最终进行组件的创建</p>\n</li>\n</ol>\n<p>![image-20211013194158430](/Users/shuanghuili/Library/Application Support/typora-user-images/image-20211013194158430.png)</p>\n"},{"title":"vue nextTick的原理","cover":"https://media.istockphoto.com/photos/dog-dreaming-picture-id1323095288?k=20&m=1323095288&s=612x612&w=0&h=ZC2DNmAcpDlMlNof1ojUXpItMhXggVfXFqnIZHU3NX4=","_content":"\n\n# Vue nextTick的原理\n\n## 使用方法 \n\n在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM\n\n```javascript\n// 修改数据\nvm.msg = 'Hello'\n// DOM 还没有更新\nVue.nextTick(function () {\n  // DOM 更新了\n})\n// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)\nVue.nextTick()\n  .then(function () {\n    // DOM 更新了\n  })\n```\n\n\n\n## 源码逻辑\n\n  Vue.nextTick在src/core/util/nextTick.js文件中，可以通过源码看出这个逻辑为，首先将回调函数加入到flushCallbacks队列中，如果监测到pending（是否正在执行）为false，则触发timerFun函数，来运行flushCallbacks队列中的回调函数。由于flushCallbacks队列中的回调函数是需要在DOM更新后执行的，那么有几种方法来实现这个想法。\n\n1.可以把回调函数放在微任务或者宏任务中运行，那样在DOM更新后才会运行这些回调函数，Vue也是首先进行了平台是否支持Promise的判断，如果支持则用promise.then()来执行队列中的回调函数\n\n2.判断浏览器是否支持MutationObserver ，如果支持就用[MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)监测DOM的更新状态，此时也是有个比较巧妙的做法是，新建了一个文本节点，当运行timerFun函数时则改变这个文本节点的值，那样MutationObserver监测到以后就运行队列中的回调函数\n\n3.判断平台是否支持setImmediate函数，通过setImmediate函数运行队列中的回调函数\n\n4.如果都不支持，则使用setTimeout宏任务来更新队列函数\n\n```javascript\n/* @flow */\n/* globals MutationObserver */\n\nimport { noop } from 'shared/util'\nimport { handleError } from './error'\nimport { isIE, isIOS, isNative } from './env'\n\nexport let isUsingMicroTask = false\n\nconst callbacks = []\nlet pending = false\n\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n  // 执行队列中的回调函数\n    copies[i]()\n  }\n}\n\nlet timerFunc\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n// 如果平台支持promise函数 则用promise执行任务队列\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  // 如果浏览器支持MutationObserver 则用MutationObserver监测DOM的更新状态\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // 在浏览器中新建一个文本节点，然后通过观测文本节点的变化来决定监测DOM的更新状态\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // 判断是否支持setImmediate函数\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  // 否则使用setTimeout来更新队列函数\n  // Fallback to setTimeout.\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  // 把nextTick的回调函数加入到队列中，\n  callbacks.push(() => {\n    if (cb) {\n      try {\n      // 执行回调函数\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n  // 当未传入回调函数时，提供一个promise的调用\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n```\n\n\n\n","source":"_posts/Vue nextTick的原理.md","raw":"---\ntitle: vue nextTick的原理\ncover: \"https://media.istockphoto.com/photos/dog-dreaming-picture-id1323095288?k=20&m=1323095288&s=612x612&w=0&h=ZC2DNmAcpDlMlNof1ojUXpItMhXggVfXFqnIZHU3NX4=\"\n---\n\n\n# Vue nextTick的原理\n\n## 使用方法 \n\n在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM\n\n```javascript\n// 修改数据\nvm.msg = 'Hello'\n// DOM 还没有更新\nVue.nextTick(function () {\n  // DOM 更新了\n})\n// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)\nVue.nextTick()\n  .then(function () {\n    // DOM 更新了\n  })\n```\n\n\n\n## 源码逻辑\n\n  Vue.nextTick在src/core/util/nextTick.js文件中，可以通过源码看出这个逻辑为，首先将回调函数加入到flushCallbacks队列中，如果监测到pending（是否正在执行）为false，则触发timerFun函数，来运行flushCallbacks队列中的回调函数。由于flushCallbacks队列中的回调函数是需要在DOM更新后执行的，那么有几种方法来实现这个想法。\n\n1.可以把回调函数放在微任务或者宏任务中运行，那样在DOM更新后才会运行这些回调函数，Vue也是首先进行了平台是否支持Promise的判断，如果支持则用promise.then()来执行队列中的回调函数\n\n2.判断浏览器是否支持MutationObserver ，如果支持就用[MutationObserver](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)监测DOM的更新状态，此时也是有个比较巧妙的做法是，新建了一个文本节点，当运行timerFun函数时则改变这个文本节点的值，那样MutationObserver监测到以后就运行队列中的回调函数\n\n3.判断平台是否支持setImmediate函数，通过setImmediate函数运行队列中的回调函数\n\n4.如果都不支持，则使用setTimeout宏任务来更新队列函数\n\n```javascript\n/* @flow */\n/* globals MutationObserver */\n\nimport { noop } from 'shared/util'\nimport { handleError } from './error'\nimport { isIE, isIOS, isNative } from './env'\n\nexport let isUsingMicroTask = false\n\nconst callbacks = []\nlet pending = false\n\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n  // 执行队列中的回调函数\n    copies[i]()\n  }\n}\n\nlet timerFunc\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n// 如果平台支持promise函数 则用promise执行任务队列\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  // 如果浏览器支持MutationObserver 则用MutationObserver监测DOM的更新状态\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // 在浏览器中新建一个文本节点，然后通过观测文本节点的变化来决定监测DOM的更新状态\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // 判断是否支持setImmediate函数\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  // 否则使用setTimeout来更新队列函数\n  // Fallback to setTimeout.\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  // 把nextTick的回调函数加入到队列中，\n  callbacks.push(() => {\n    if (cb) {\n      try {\n      // 执行回调函数\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n  // 当未传入回调函数时，提供一个promise的调用\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n```\n\n\n\n","slug":"Vue nextTick的原理","published":1,"date":"2022-04-01T12:06:02.451Z","updated":"2022-04-01T12:13:24.472Z","_id":"cl1gdql9300015av6gocd67f1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vue-nextTick的原理\"><a href=\"#Vue-nextTick的原理\" class=\"headerlink\" title=\"Vue nextTick的原理\"></a>Vue nextTick的原理</h1><h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 修改数据</span>\nvm<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n<span class=\"token comment\">// DOM 还没有更新</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// DOM 更新了</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// DOM 更新了</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"源码逻辑\"><a href=\"#源码逻辑\" class=\"headerlink\" title=\"源码逻辑\"></a>源码逻辑</h2><p>  Vue.nextTick在src/core/util/nextTick.js文件中，可以通过源码看出这个逻辑为，首先将回调函数加入到flushCallbacks队列中，如果监测到pending（是否正在执行）为false，则触发timerFun函数，来运行flushCallbacks队列中的回调函数。由于flushCallbacks队列中的回调函数是需要在DOM更新后执行的，那么有几种方法来实现这个想法。</p>\n<p>1.可以把回调函数放在微任务或者宏任务中运行，那样在DOM更新后才会运行这些回调函数，Vue也是首先进行了平台是否支持Promise的判断，如果支持则用promise.then()来执行队列中的回调函数</p>\n<p>2.判断浏览器是否支持MutationObserver ，如果支持就用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\">MutationObserver</a>监测DOM的更新状态，此时也是有个比较巧妙的做法是，新建了一个文本节点，当运行timerFun函数时则改变这个文本节点的值，那样MutationObserver监测到以后就运行队列中的回调函数</p>\n<p>3.判断平台是否支持setImmediate函数，通过setImmediate函数运行队列中的回调函数</p>\n<p>4.如果都不支持，则使用setTimeout宏任务来更新队列函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* @flow */</span>\n<span class=\"token comment\">/* globals MutationObserver */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> noop <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'shared/util'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> handleError <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./error'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isIE<span class=\"token punctuation\">,</span> isIOS<span class=\"token punctuation\">,</span> isNative <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./env'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> isUsingMicroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">flushCallbacks</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">const</span> copies <span class=\"token operator\">=</span> callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  callbacks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> copies<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 执行队列中的回调函数</span>\n    copies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> timerFunc\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Promise <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 如果平台支持promise函数 则用promise执行任务队列</span>\n  <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isIOS<span class=\"token punctuation\">)</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>noop<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  isUsingMicroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isIE <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> MutationObserver <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 如果浏览器支持MutationObserver 则用MutationObserver监测DOM的更新状态</span>\n  <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>MutationObserver<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n  <span class=\"token comment\">// PhantomJS and iOS 7.x</span>\n  MutationObserver<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object MutationObserverConstructor]'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 在浏览器中新建一个文本节点，然后通过观测文本节点的变化来决定监测DOM的更新状态</span>\n  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> textNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">characterData</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span>\n    textNode<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  isUsingMicroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> setImmediate <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>setImmediate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 判断是否支持setImmediate函数</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 否则使用setTimeout来更新队列函数</span>\n  <span class=\"token comment\">// Fallback to setTimeout.</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">nextTick</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Function<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> _resolve\n  <span class=\"token comment\">// 把nextTick的回调函数加入到队列中，</span>\n  callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 执行回调函数</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">'nextTick'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">_resolve</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    pending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token function\">timerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 当未传入回调函数时，提供一个promise的调用</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cb <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> Promise <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      _resolve <span class=\"token operator\">=</span> resolve\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue-nextTick的原理\"><a href=\"#Vue-nextTick的原理\" class=\"headerlink\" title=\"Vue nextTick的原理\"></a>Vue nextTick的原理</h1><h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 修改数据</span>\nvm<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n<span class=\"token comment\">// DOM 还没有更新</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// DOM 更新了</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// DOM 更新了</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"源码逻辑\"><a href=\"#源码逻辑\" class=\"headerlink\" title=\"源码逻辑\"></a>源码逻辑</h2><p>  Vue.nextTick在src/core/util/nextTick.js文件中，可以通过源码看出这个逻辑为，首先将回调函数加入到flushCallbacks队列中，如果监测到pending（是否正在执行）为false，则触发timerFun函数，来运行flushCallbacks队列中的回调函数。由于flushCallbacks队列中的回调函数是需要在DOM更新后执行的，那么有几种方法来实现这个想法。</p>\n<p>1.可以把回调函数放在微任务或者宏任务中运行，那样在DOM更新后才会运行这些回调函数，Vue也是首先进行了平台是否支持Promise的判断，如果支持则用promise.then()来执行队列中的回调函数</p>\n<p>2.判断浏览器是否支持MutationObserver ，如果支持就用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\">MutationObserver</a>监测DOM的更新状态，此时也是有个比较巧妙的做法是，新建了一个文本节点，当运行timerFun函数时则改变这个文本节点的值，那样MutationObserver监测到以后就运行队列中的回调函数</p>\n<p>3.判断平台是否支持setImmediate函数，通过setImmediate函数运行队列中的回调函数</p>\n<p>4.如果都不支持，则使用setTimeout宏任务来更新队列函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* @flow */</span>\n<span class=\"token comment\">/* globals MutationObserver */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> noop <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'shared/util'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> handleError <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./error'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isIE<span class=\"token punctuation\">,</span> isIOS<span class=\"token punctuation\">,</span> isNative <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./env'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> isUsingMicroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">flushCallbacks</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">const</span> copies <span class=\"token operator\">=</span> callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  callbacks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> copies<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 执行队列中的回调函数</span>\n    copies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> timerFunc\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Promise <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 如果平台支持promise函数 则用promise执行任务队列</span>\n  <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isIOS<span class=\"token punctuation\">)</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>noop<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  isUsingMicroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isIE <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> MutationObserver <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 如果浏览器支持MutationObserver 则用MutationObserver监测DOM的更新状态</span>\n  <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>MutationObserver<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n  <span class=\"token comment\">// PhantomJS and iOS 7.x</span>\n  MutationObserver<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object MutationObserverConstructor]'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 在浏览器中新建一个文本节点，然后通过观测文本节点的变化来决定监测DOM的更新状态</span>\n  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> textNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">characterData</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span>\n    textNode<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  isUsingMicroTask <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> setImmediate <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isNative</span><span class=\"token punctuation\">(</span>setImmediate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 判断是否支持setImmediate函数</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 否则使用setTimeout来更新队列函数</span>\n  <span class=\"token comment\">// Fallback to setTimeout.</span>\n  <span class=\"token function-variable function\">timerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">nextTick</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Function<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> _resolve\n  <span class=\"token comment\">// 把nextTick的回调函数加入到队列中，</span>\n  callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 执行回调函数</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token string\">'nextTick'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">_resolve</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    pending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token function\">timerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 当未传入回调函数时，提供一个promise的调用</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cb <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> Promise <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      _resolve <span class=\"token operator\">=</span> resolve\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n"},{"title":"Vue3调试环境准备","cover":"https://images.unsplash.com/photo-1573865526739-10659fec78a5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8YW5pbWFsJTIwbG92ZXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60","_content":"\n# Vue3调试环境准备\n\n## 1.克隆Vue3的代码\n\n```javascript\ngit clone https://github.com/vuejs/vue-next.git\n```\n\n## 2.安装依赖和打包\n\n```\nyarn\nyarn dev\n```\n\nyarn dev启动rollup将代码打包生成为vue.global.js，文件位置如图所示\n\n![image (1)](./image (1).png)\n\n### 3.新建demo页面，并在文件中引入vue.global.js文件\n\n![Screenshot 2021-02-19 at 5.36.13 PM](./Screenshot 2021-02-19 at 5.36.13 PM.png)\n\n此处贴上我的composition.html页面\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"../../packages/vue/dist/vue.global.js\"></script>\n</head>\n\n<body>\n    <div id=\"event-handling\" class=\"demo\">\n        <p>{{ message }}</p>\n        <button v-on:click=\"reverseMessage\">Reverse Message</button>\n    </div>\n</body>\n<script>\n    const EventHandling = {\n        data() {\n            return {\n                message: 'Hello Vue.js!'\n            }\n        },\n        methods: {\n            reverseMessage() {\n                this.message = this.message\n                    .split('')\n                    .reverse()\n                    .join('')\n            }\n        }\n    }\n\n    Vue.createApp(EventHandling).mount('#event-handling')\n</script>\n\n</html>\n```\n\n## 4.添加SourceMap文件\n\n为了在浏览器能够查看源码和断点调试，可在rollup.config.js文件的createConfig函数中添加如下的命令，表示打包的时候会生成sourcemap文件用来记录函数的位置。\n\n```\noutput.sourcemap = true\n```\n\n然后在在tsconfig.json中配置sourcemap输出\n\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"outDir\": \"dist\",\n    // 修改sourcemap文件的配置\n    \"sourceMap\": true,\n    ...\n}\n```\n\n完成以上操作即可实现在浏览器断点调试了，如果想在vscode进行断点调试可参考以下操作\n\n## 5.修改.vscode的文件夹下面launch.json文件\n\n添加如下配置，并修改file的路径为html demo文件的路径\n\n![Screenshot 2021-02-19 at 5.56.53 PM](./Screenshot 2021-02-19 at 5.56.53 PM.png)\n\n最后点击左侧的run，然后点击调试Vue调用即可调起调试的页面，也可以在源码中打断点进行调试\n\n![Screenshot 2021-02-19 at 6.00.44 PM](./Screenshot 2021-02-19 at 6.00.44 PM.png)","source":"_posts/Vue3调试环境准备.md","raw":"---\ntitle: Vue3调试环境准备\ncover: \"https://images.unsplash.com/photo-1573865526739-10659fec78a5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8YW5pbWFsJTIwbG92ZXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60\"\n---\n\n# Vue3调试环境准备\n\n## 1.克隆Vue3的代码\n\n```javascript\ngit clone https://github.com/vuejs/vue-next.git\n```\n\n## 2.安装依赖和打包\n\n```\nyarn\nyarn dev\n```\n\nyarn dev启动rollup将代码打包生成为vue.global.js，文件位置如图所示\n\n![image (1)](./image (1).png)\n\n### 3.新建demo页面，并在文件中引入vue.global.js文件\n\n![Screenshot 2021-02-19 at 5.36.13 PM](./Screenshot 2021-02-19 at 5.36.13 PM.png)\n\n此处贴上我的composition.html页面\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"../../packages/vue/dist/vue.global.js\"></script>\n</head>\n\n<body>\n    <div id=\"event-handling\" class=\"demo\">\n        <p>{{ message }}</p>\n        <button v-on:click=\"reverseMessage\">Reverse Message</button>\n    </div>\n</body>\n<script>\n    const EventHandling = {\n        data() {\n            return {\n                message: 'Hello Vue.js!'\n            }\n        },\n        methods: {\n            reverseMessage() {\n                this.message = this.message\n                    .split('')\n                    .reverse()\n                    .join('')\n            }\n        }\n    }\n\n    Vue.createApp(EventHandling).mount('#event-handling')\n</script>\n\n</html>\n```\n\n## 4.添加SourceMap文件\n\n为了在浏览器能够查看源码和断点调试，可在rollup.config.js文件的createConfig函数中添加如下的命令，表示打包的时候会生成sourcemap文件用来记录函数的位置。\n\n```\noutput.sourcemap = true\n```\n\n然后在在tsconfig.json中配置sourcemap输出\n\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"outDir\": \"dist\",\n    // 修改sourcemap文件的配置\n    \"sourceMap\": true,\n    ...\n}\n```\n\n完成以上操作即可实现在浏览器断点调试了，如果想在vscode进行断点调试可参考以下操作\n\n## 5.修改.vscode的文件夹下面launch.json文件\n\n添加如下配置，并修改file的路径为html demo文件的路径\n\n![Screenshot 2021-02-19 at 5.56.53 PM](./Screenshot 2021-02-19 at 5.56.53 PM.png)\n\n最后点击左侧的run，然后点击调试Vue调用即可调起调试的页面，也可以在源码中打断点进行调试\n\n![Screenshot 2021-02-19 at 6.00.44 PM](./Screenshot 2021-02-19 at 6.00.44 PM.png)","slug":"Vue3调试环境准备","published":1,"date":"2022-04-01T12:14:15.209Z","updated":"2022-04-01T12:15:34.347Z","_id":"cl1ge15go00025av630u02ome","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vue3调试环境准备\"><a href=\"#Vue3调试环境准备\" class=\"headerlink\" title=\"Vue3调试环境准备\"></a>Vue3调试环境准备</h1><h2 id=\"1-克隆Vue3的代码\"><a href=\"#1-克隆Vue3的代码\" class=\"headerlink\" title=\"1.克隆Vue3的代码\"></a>1.克隆Vue3的代码</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">git clone https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>vuejs<span class=\"token operator\">/</span>vue<span class=\"token operator\">-</span>next<span class=\"token punctuation\">.</span>git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"2-安装依赖和打包\"><a href=\"#2-安装依赖和打包\" class=\"headerlink\" title=\"2.安装依赖和打包\"></a>2.安装依赖和打包</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">yarn\nyarn dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>yarn dev启动rollup将代码打包生成为vue.global.js，文件位置如图所示</p>\n<p>![image (1)](./image (1).png)</p>\n<h3 id=\"3-新建demo页面，并在文件中引入vue-global-js文件\"><a href=\"#3-新建demo页面，并在文件中引入vue-global-js文件\" class=\"headerlink\" title=\"3.新建demo页面，并在文件中引入vue.global.js文件\"></a>3.新建demo页面，并在文件中引入vue.global.js文件</h3><p>![Screenshot 2021-02-19 at 5.36.13 PM](./Screenshot 2021-02-19 at 5.36.13 PM.png)</p>\n<p>此处贴上我的composition.html页面</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1.0\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta http<span class=\"token operator\">-</span>equiv<span class=\"token operator\">=</span><span class=\"token string\">\"X-UA-Compatible\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"ie=edge\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Document<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"../../packages/vue/dist/vue.global.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"event-handling\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"demo\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> message <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token operator\">=</span><span class=\"token string\">\"reverseMessage\"</span><span class=\"token operator\">></span>Reverse Message<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token keyword\">const</span> EventHandling <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello Vue.js!'</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">reverseMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    Vue<span class=\"token punctuation\">.</span><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>EventHandling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#event-handling'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-添加SourceMap文件\"><a href=\"#4-添加SourceMap文件\" class=\"headerlink\" title=\"4.添加SourceMap文件\"></a>4.添加SourceMap文件</h2><p>为了在浏览器能够查看源码和断点调试，可在rollup.config.js文件的createConfig函数中添加如下的命令，表示打包的时候会生成sourcemap文件用来记录函数的位置。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">output.sourcemap &#x3D; true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后在在tsconfig.json中配置sourcemap输出</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n  &quot;compilerOptions&quot;: &#123;\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;outDir&quot;: &quot;dist&quot;,\n    &#x2F;&#x2F; 修改sourcemap文件的配置\n    &quot;sourceMap&quot;: true,\n    ...\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>完成以上操作即可实现在浏览器断点调试了，如果想在vscode进行断点调试可参考以下操作</p>\n<h2 id=\"5-修改-vscode的文件夹下面launch-json文件\"><a href=\"#5-修改-vscode的文件夹下面launch-json文件\" class=\"headerlink\" title=\"5.修改.vscode的文件夹下面launch.json文件\"></a>5.修改.vscode的文件夹下面launch.json文件</h2><p>添加如下配置，并修改file的路径为html demo文件的路径</p>\n<p>![Screenshot 2021-02-19 at 5.56.53 PM](./Screenshot 2021-02-19 at 5.56.53 PM.png)</p>\n<p>最后点击左侧的run，然后点击调试Vue调用即可调起调试的页面，也可以在源码中打断点进行调试</p>\n<p>![Screenshot 2021-02-19 at 6.00.44 PM](./Screenshot 2021-02-19 at 6.00.44 PM.png)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue3调试环境准备\"><a href=\"#Vue3调试环境准备\" class=\"headerlink\" title=\"Vue3调试环境准备\"></a>Vue3调试环境准备</h1><h2 id=\"1-克隆Vue3的代码\"><a href=\"#1-克隆Vue3的代码\" class=\"headerlink\" title=\"1.克隆Vue3的代码\"></a>1.克隆Vue3的代码</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">git clone https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>vuejs<span class=\"token operator\">/</span>vue<span class=\"token operator\">-</span>next<span class=\"token punctuation\">.</span>git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"2-安装依赖和打包\"><a href=\"#2-安装依赖和打包\" class=\"headerlink\" title=\"2.安装依赖和打包\"></a>2.安装依赖和打包</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">yarn\nyarn dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>yarn dev启动rollup将代码打包生成为vue.global.js，文件位置如图所示</p>\n<p>![image (1)](./image (1).png)</p>\n<h3 id=\"3-新建demo页面，并在文件中引入vue-global-js文件\"><a href=\"#3-新建demo页面，并在文件中引入vue-global-js文件\" class=\"headerlink\" title=\"3.新建demo页面，并在文件中引入vue.global.js文件\"></a>3.新建demo页面，并在文件中引入vue.global.js文件</h3><p>![Screenshot 2021-02-19 at 5.36.13 PM](./Screenshot 2021-02-19 at 5.36.13 PM.png)</p>\n<p>此处贴上我的composition.html页面</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1.0\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta http<span class=\"token operator\">-</span>equiv<span class=\"token operator\">=</span><span class=\"token string\">\"X-UA-Compatible\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"ie=edge\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Document<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"../../packages/vue/dist/vue.global.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"event-handling\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"demo\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> message <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>click<span class=\"token operator\">=</span><span class=\"token string\">\"reverseMessage\"</span><span class=\"token operator\">></span>Reverse Message<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token keyword\">const</span> EventHandling <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello Vue.js!'</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">reverseMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    Vue<span class=\"token punctuation\">.</span><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>EventHandling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#event-handling'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-添加SourceMap文件\"><a href=\"#4-添加SourceMap文件\" class=\"headerlink\" title=\"4.添加SourceMap文件\"></a>4.添加SourceMap文件</h2><p>为了在浏览器能够查看源码和断点调试，可在rollup.config.js文件的createConfig函数中添加如下的命令，表示打包的时候会生成sourcemap文件用来记录函数的位置。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">output.sourcemap &#x3D; true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后在在tsconfig.json中配置sourcemap输出</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n  &quot;compilerOptions&quot;: &#123;\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;outDir&quot;: &quot;dist&quot;,\n    &#x2F;&#x2F; 修改sourcemap文件的配置\n    &quot;sourceMap&quot;: true,\n    ...\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>完成以上操作即可实现在浏览器断点调试了，如果想在vscode进行断点调试可参考以下操作</p>\n<h2 id=\"5-修改-vscode的文件夹下面launch-json文件\"><a href=\"#5-修改-vscode的文件夹下面launch-json文件\" class=\"headerlink\" title=\"5.修改.vscode的文件夹下面launch.json文件\"></a>5.修改.vscode的文件夹下面launch.json文件</h2><p>添加如下配置，并修改file的路径为html demo文件的路径</p>\n<p>![Screenshot 2021-02-19 at 5.56.53 PM](./Screenshot 2021-02-19 at 5.56.53 PM.png)</p>\n<p>最后点击左侧的run，然后点击调试Vue调用即可调起调试的页面，也可以在源码中打断点进行调试</p>\n<p>![Screenshot 2021-02-19 at 6.00.44 PM](./Screenshot 2021-02-19 at 6.00.44 PM.png)</p>\n"},{"title":"Vue3调试环境准备","cover":"https://images.unsplash.com/photo-1548802673-380ab8ebc7b7?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mjd8fGFuaW1hbCUyMGxvdmV8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60","_content":"\n[首先请参考Vue异步组件的用法](https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6)\n\n## 1.用例分析\n\n此处写一个Vue异步组件的例子：\n\n```javascript\nVue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    // 向 `resolve` 回调传递组件定义\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n```\n可见此处传入了两个参数，一个是组件的名字，一个是工厂函数，工厂函数接受两个参数（resolve， reject），工厂函数会收到一个`resolve`回调，这个回调函数会在你从服务器得到组件定义的时候被调用。也可以调用`reject(reason)`来表示加载失败。\n不想这个异步组件实现的具体的逻辑，先考虑一下大方向：\n\n1.怎么判断这是一个异步组件\n\n2.在确定是异步组件以后，要调用异步函数来渲染和生成组件并将结果保存，并创建异步组件的占位符\n\n3.异步函数运行完以后，通过watcher来进行组件更新\n\n## 2.具体逻辑解释\n\n如果不是html标签，都会进入到createComponent函数中来创建VNode节点，那么异步组件肯定会进入到该函数中，该函数做三件事情\n\n1）判断组件函数，然后进入不同的函数来进行相应的逻辑处理，如果传入的参数是对象，则通过Ctor = baseCtor.extend(Ctor)构造子类构造函数，如果是函数，说明传入的是异步组件，则进入到resolveAsyncComponent函数中\n\n2）安装组件的钩子函数\n\n3）通过以上函数完成相应组件的配置，从而根据这些配置来实例化VNode节点\n\n```javascript\nfunction createComponent(\n        Ctor,\n        data,\n        context,\n        children,\n        tag\n    ) {\n        if (isUndef(Ctor)) {\n            return\n        }\n        var baseCtor = context.$options._base;\n        // 自定义组件(异步组件除外)均会传入一个对象\n        if (isObject(Ctor)) {\n            // 构造子类构造函数\n            Ctor = baseCtor.extend(Ctor);\n        }\n        // 如果既不是对象也不是函数 则给出\"无效组件\"的提示\n        if (typeof Ctor !== 'function') {\n            {\n                warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n            }\n            return\n        }\n        var asyncFactory;\n        // 通过cid属性是否未定义来判断是否为异步组件\n        if (isUndef(Ctor.cid)) {\n            asyncFactory = Ctor;\n            // 正式进入处理异步组件的函数\n            Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n            if (Ctor === undefined) {\n                // 创建异步组件的占位符\n                return createAsyncPlaceholder(\n                    asyncFactory,\n                    data,\n                    context,\n                    children,\n                    tag\n                )\n            }\n        }\n        // 安装组件的钩子函数\n        installComponentHooks(data);\n        // return a placeholder vnode\n        var name = Ctor.options.name || tag;\n        // 创建VNode节点\n        var vnode = new VNode(\n            (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n            data, undefined, undefined, undefined, context,\n            { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n            asyncFactory\n        );\n        return vnode\n    }\n```\n由于此处重点讲解异步组件的逻辑，那么就重点看下resolveAsyncComponent的逻辑，\n```javascript\nfunction resolveAsyncComponent(\n        factory,\n        baseCtor\n    ) {\n        if (isTrue(factory.error) && isDef(factory.errorComp)) {\n            return factory.errorComp\n        }\n        if (isDef(factory.resolved)) {\n         // 此时返回缓存的组件\n            return factory.resolved\n        }\nif (owner && !isDef(factory.owners)) {\n            var owners = factory.owners = [owner];\n            var sync = true;\n            var timerLoading = null;\n            var timerTimeout = null\n                ; (owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n            var forceRender = function (renderCompleted) {\n                for (var i = 0, l = owners.length; i < l; i++) {\n                 // 触发组件强制更新的函数\n                    (owners[i]).$forceUpdate();\n                }\n            };\n// 保证resolve函数只运行一次\nvar resolve = once(function (res) {\n// 创建异步组件并保存在resolved中\nfactory.resolved = ensureCtor(res, baseCtor);\n// 如果不是同步的，则进行强制更新 \n                if (!sync) {\n                    forceRender(true);\n                } else {\n                    owners.length = 0;\n                }\n            });\n // 保证reject函数只运行一次\n            var reject = once(function (reason) {\n                warn(\n                    \"Failed to resolve async component: \" + (String(factory)) +\n                    (reason ? (\"\\nReason: \" + reason) : '')\n                );\n                // 如果渲染错误切定义了加载失败的组件，则显示错误\n                if (isDef(factory.errorComp)) {\n                    factory.error = true;\n                    forceRender(true);\n                }\n            });\n            //执行工厂函数(异步函数)\n            var res = factory(resolve, reject);\n            if (isObject(res)) {\n            // 如果函数返回的结果为一个promise对象\n                if (isPromise(res)) {\n                    // () => Promise\n                    if (isUndef(factory.resolved)) {\n                     // 如果加载成功运行定义的resolve函数\n                        res.then(resolve, reject);\n                    }\n                } \n            }\n            sync = false;\n            // return in case resolved synchronously\n            return factory.loading\n                ? factory.loadingComp\n                : factory.resolved\n        }\n    }\n```\n可见以上写法的逻辑已经梳理完毕了，但是还有高级异步组件的写法如下:\n\n```javascript\nconst AsyncComponent = () => ({\n  // 需要加载的组件 (应该是一个 `Promise` 对象)\n  component: import('./MyComponent.vue'),\n  // 异步组件加载时使用的组件\n  loading: LoadingComponent,\n  // 加载失败时使用的组件\n  error: ErrorComponent,\n  // 展示加载时组件的延时时间。默认值是 200 (毫秒)\n  delay: 200,\n  // 如果提供了超时时间且组件加载也超时了，\n  // 则使用加载失败时使用的组件。默认值是：`Infinity`\n  timeout: 3000\n})\n```\n可以看到多了很多配置条件，可以在异步的不同状态下分别加载不同的页面，然后可以看一下Vue是怎么处理这一块的逻辑。\n```javascript\nif (isObject(res)) {\n  if (isPromise(res)) {\n    // () => Promise\n    if (isUndef(factory.resolved)) {\n      res.then(resolve, reject)\n    }\n    // 如果component是promise对象\n  } else if (isPromise(res.component)) {\n    //加载异步组件成功的话进入resolve回调，失败的话进入reject回调\n    res.component.then(resolve, reject)\n    // 如果定义了error\n    if (isDef(res.error)) {\n      // 调用ensureCtor方法传入错误组件和基本配置来创建组件并添加缓存\n      factory.errorComp = ensureCtor(res.error, baseCtor)\n    }\n    // 如果定义了loading\n    if (isDef(res.loading)) {\n      // 创建loading组件并加入缓存\n      factory.loadingComp = ensureCtor(res.loading, baseCtor)\n      // 如果没有设置delay的时间，直接设置loading的状态为true\n      if (res.delay === 0) {\n        factory.loading = true\n      } else {\n        // 如果有delay的话，就用setTimeout函数使得在多少时间后触发强制更新来渲染loading组件\n        timerLoading = setTimeout(function () {\n          timerLoading = null\n          if (isUndef(factory.resolved) && isUndef(factory.error)) {\n            factory.loading = true\n            // 强制更新并传入并未渲染完成的参数\n            forceRender(false)\n          }\n        }, res.delay || 200)\n      }\n    }\n    // 如果定义了timeout\n    if (isDef(res.timeout)) {\n      timerTimeout = setTimeout(function () {\n        timerTimeout = null\n        if (isUndef(factory.resolved)) {\n          // 进入到reject回调函数 \n          reject('timeout (' + (res.timeout) + 'ms)')\n        }\n      }, res.timeout)\n    }\n  }\n}\n```","source":"_posts/Vue异步组件逻辑.md","raw":"---\ntitle: Vue3调试环境准备\ncover: \"https://images.unsplash.com/photo-1548802673-380ab8ebc7b7?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mjd8fGFuaW1hbCUyMGxvdmV8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60\"\n---\n\n[首先请参考Vue异步组件的用法](https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6)\n\n## 1.用例分析\n\n此处写一个Vue异步组件的例子：\n\n```javascript\nVue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    // 向 `resolve` 回调传递组件定义\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n```\n可见此处传入了两个参数，一个是组件的名字，一个是工厂函数，工厂函数接受两个参数（resolve， reject），工厂函数会收到一个`resolve`回调，这个回调函数会在你从服务器得到组件定义的时候被调用。也可以调用`reject(reason)`来表示加载失败。\n不想这个异步组件实现的具体的逻辑，先考虑一下大方向：\n\n1.怎么判断这是一个异步组件\n\n2.在确定是异步组件以后，要调用异步函数来渲染和生成组件并将结果保存，并创建异步组件的占位符\n\n3.异步函数运行完以后，通过watcher来进行组件更新\n\n## 2.具体逻辑解释\n\n如果不是html标签，都会进入到createComponent函数中来创建VNode节点，那么异步组件肯定会进入到该函数中，该函数做三件事情\n\n1）判断组件函数，然后进入不同的函数来进行相应的逻辑处理，如果传入的参数是对象，则通过Ctor = baseCtor.extend(Ctor)构造子类构造函数，如果是函数，说明传入的是异步组件，则进入到resolveAsyncComponent函数中\n\n2）安装组件的钩子函数\n\n3）通过以上函数完成相应组件的配置，从而根据这些配置来实例化VNode节点\n\n```javascript\nfunction createComponent(\n        Ctor,\n        data,\n        context,\n        children,\n        tag\n    ) {\n        if (isUndef(Ctor)) {\n            return\n        }\n        var baseCtor = context.$options._base;\n        // 自定义组件(异步组件除外)均会传入一个对象\n        if (isObject(Ctor)) {\n            // 构造子类构造函数\n            Ctor = baseCtor.extend(Ctor);\n        }\n        // 如果既不是对象也不是函数 则给出\"无效组件\"的提示\n        if (typeof Ctor !== 'function') {\n            {\n                warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n            }\n            return\n        }\n        var asyncFactory;\n        // 通过cid属性是否未定义来判断是否为异步组件\n        if (isUndef(Ctor.cid)) {\n            asyncFactory = Ctor;\n            // 正式进入处理异步组件的函数\n            Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n            if (Ctor === undefined) {\n                // 创建异步组件的占位符\n                return createAsyncPlaceholder(\n                    asyncFactory,\n                    data,\n                    context,\n                    children,\n                    tag\n                )\n            }\n        }\n        // 安装组件的钩子函数\n        installComponentHooks(data);\n        // return a placeholder vnode\n        var name = Ctor.options.name || tag;\n        // 创建VNode节点\n        var vnode = new VNode(\n            (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n            data, undefined, undefined, undefined, context,\n            { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n            asyncFactory\n        );\n        return vnode\n    }\n```\n由于此处重点讲解异步组件的逻辑，那么就重点看下resolveAsyncComponent的逻辑，\n```javascript\nfunction resolveAsyncComponent(\n        factory,\n        baseCtor\n    ) {\n        if (isTrue(factory.error) && isDef(factory.errorComp)) {\n            return factory.errorComp\n        }\n        if (isDef(factory.resolved)) {\n         // 此时返回缓存的组件\n            return factory.resolved\n        }\nif (owner && !isDef(factory.owners)) {\n            var owners = factory.owners = [owner];\n            var sync = true;\n            var timerLoading = null;\n            var timerTimeout = null\n                ; (owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n            var forceRender = function (renderCompleted) {\n                for (var i = 0, l = owners.length; i < l; i++) {\n                 // 触发组件强制更新的函数\n                    (owners[i]).$forceUpdate();\n                }\n            };\n// 保证resolve函数只运行一次\nvar resolve = once(function (res) {\n// 创建异步组件并保存在resolved中\nfactory.resolved = ensureCtor(res, baseCtor);\n// 如果不是同步的，则进行强制更新 \n                if (!sync) {\n                    forceRender(true);\n                } else {\n                    owners.length = 0;\n                }\n            });\n // 保证reject函数只运行一次\n            var reject = once(function (reason) {\n                warn(\n                    \"Failed to resolve async component: \" + (String(factory)) +\n                    (reason ? (\"\\nReason: \" + reason) : '')\n                );\n                // 如果渲染错误切定义了加载失败的组件，则显示错误\n                if (isDef(factory.errorComp)) {\n                    factory.error = true;\n                    forceRender(true);\n                }\n            });\n            //执行工厂函数(异步函数)\n            var res = factory(resolve, reject);\n            if (isObject(res)) {\n            // 如果函数返回的结果为一个promise对象\n                if (isPromise(res)) {\n                    // () => Promise\n                    if (isUndef(factory.resolved)) {\n                     // 如果加载成功运行定义的resolve函数\n                        res.then(resolve, reject);\n                    }\n                } \n            }\n            sync = false;\n            // return in case resolved synchronously\n            return factory.loading\n                ? factory.loadingComp\n                : factory.resolved\n        }\n    }\n```\n可见以上写法的逻辑已经梳理完毕了，但是还有高级异步组件的写法如下:\n\n```javascript\nconst AsyncComponent = () => ({\n  // 需要加载的组件 (应该是一个 `Promise` 对象)\n  component: import('./MyComponent.vue'),\n  // 异步组件加载时使用的组件\n  loading: LoadingComponent,\n  // 加载失败时使用的组件\n  error: ErrorComponent,\n  // 展示加载时组件的延时时间。默认值是 200 (毫秒)\n  delay: 200,\n  // 如果提供了超时时间且组件加载也超时了，\n  // 则使用加载失败时使用的组件。默认值是：`Infinity`\n  timeout: 3000\n})\n```\n可以看到多了很多配置条件，可以在异步的不同状态下分别加载不同的页面，然后可以看一下Vue是怎么处理这一块的逻辑。\n```javascript\nif (isObject(res)) {\n  if (isPromise(res)) {\n    // () => Promise\n    if (isUndef(factory.resolved)) {\n      res.then(resolve, reject)\n    }\n    // 如果component是promise对象\n  } else if (isPromise(res.component)) {\n    //加载异步组件成功的话进入resolve回调，失败的话进入reject回调\n    res.component.then(resolve, reject)\n    // 如果定义了error\n    if (isDef(res.error)) {\n      // 调用ensureCtor方法传入错误组件和基本配置来创建组件并添加缓存\n      factory.errorComp = ensureCtor(res.error, baseCtor)\n    }\n    // 如果定义了loading\n    if (isDef(res.loading)) {\n      // 创建loading组件并加入缓存\n      factory.loadingComp = ensureCtor(res.loading, baseCtor)\n      // 如果没有设置delay的时间，直接设置loading的状态为true\n      if (res.delay === 0) {\n        factory.loading = true\n      } else {\n        // 如果有delay的话，就用setTimeout函数使得在多少时间后触发强制更新来渲染loading组件\n        timerLoading = setTimeout(function () {\n          timerLoading = null\n          if (isUndef(factory.resolved) && isUndef(factory.error)) {\n            factory.loading = true\n            // 强制更新并传入并未渲染完成的参数\n            forceRender(false)\n          }\n        }, res.delay || 200)\n      }\n    }\n    // 如果定义了timeout\n    if (isDef(res.timeout)) {\n      timerTimeout = setTimeout(function () {\n        timerTimeout = null\n        if (isUndef(factory.resolved)) {\n          // 进入到reject回调函数 \n          reject('timeout (' + (res.timeout) + 'ms)')\n        }\n      }, res.timeout)\n    }\n  }\n}\n```","slug":"Vue异步组件逻辑","published":1,"date":"2022-04-01T12:15:39.521Z","updated":"2022-04-01T12:16:24.222Z","_id":"cl1ge2yfw00035av65gbvhuqj","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6\">首先请参考Vue异步组件的用法</a></p>\n<h2 id=\"1-用例分析\"><a href=\"#1-用例分析\" class=\"headerlink\" title=\"1.用例分析\"></a>1.用例分析</h2><p>此处写一个Vue异步组件的例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async-example'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 向 `resolve` 回调传递组件定义</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;div>I am async!&lt;/div>'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可见此处传入了两个参数，一个是组件的名字，一个是工厂函数，工厂函数接受两个参数（resolve， reject），工厂函数会收到一个<code>resolve</code>回调，这个回调函数会在你从服务器得到组件定义的时候被调用。也可以调用<code>reject(reason)</code>来表示加载失败。<br>不想这个异步组件实现的具体的逻辑，先考虑一下大方向：</p>\n<p>1.怎么判断这是一个异步组件</p>\n<p>2.在确定是异步组件以后，要调用异步函数来渲染和生成组件并将结果保存，并创建异步组件的占位符</p>\n<p>3.异步函数运行完以后，通过watcher来进行组件更新</p>\n<h2 id=\"2-具体逻辑解释\"><a href=\"#2-具体逻辑解释\" class=\"headerlink\" title=\"2.具体逻辑解释\"></a>2.具体逻辑解释</h2><p>如果不是html标签，都会进入到createComponent函数中来创建VNode节点，那么异步组件肯定会进入到该函数中，该函数做三件事情</p>\n<p>1）判断组件函数，然后进入不同的函数来进行相应的逻辑处理，如果传入的参数是对象，则通过Ctor = baseCtor.extend(Ctor)构造子类构造函数，如果是函数，说明传入的是异步组件，则进入到resolveAsyncComponent函数中</p>\n<p>2）安装组件的钩子函数</p>\n<p>3）通过以上函数完成相应组件的配置，从而根据这些配置来实例化VNode节点</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">Ctor<span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">,</span>\n        context<span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">,</span>\n        tag</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">var</span> baseCtor <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>_base<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自定义组件(异步组件除外)均会传入一个对象</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 构造子类构造函数</span>\n            Ctor <span class=\"token operator\">=</span> baseCtor<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 如果既不是对象也不是函数 则给出\"无效组件\"的提示</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Ctor <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Component definition: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">var</span> asyncFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过cid属性是否未定义来判断是否为异步组件</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">.</span>cid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            asyncFactory <span class=\"token operator\">=</span> Ctor<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 正式进入处理异步组件的函数</span>\n            Ctor <span class=\"token operator\">=</span> <span class=\"token function\">resolveAsyncComponent</span><span class=\"token punctuation\">(</span>asyncFactory<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ctor <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 创建异步组件的占位符</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">createAsyncPlaceholder</span><span class=\"token punctuation\">(</span>\n                    asyncFactory<span class=\"token punctuation\">,</span>\n                    data<span class=\"token punctuation\">,</span>\n                    context<span class=\"token punctuation\">,</span>\n                    children<span class=\"token punctuation\">,</span>\n                    tag\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 安装组件的钩子函数</span>\n        <span class=\"token function\">installComponentHooks</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// return a placeholder vnode</span>\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> Ctor<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> tag<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建VNode节点</span>\n        <span class=\"token keyword\">var</span> vnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token string\">\"vue-component-\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">.</span>cid<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">Ctor</span><span class=\"token operator\">:</span> Ctor<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">propsData</span><span class=\"token operator\">:</span> propsData<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">listeners</span><span class=\"token operator\">:</span> listeners<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> tag<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            asyncFactory\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> vnode\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于此处重点讲解异步组件的逻辑，那么就重点看下resolveAsyncComponent的逻辑，</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">resolveAsyncComponent</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">factory<span class=\"token punctuation\">,</span>\n        baseCtor</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>errorComp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span>errorComp\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// 此时返回缓存的组件</span>\n            <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span>resolved\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>owner <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>owners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">var</span> owners <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span>owners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> sync <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> timerLoading <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> timerTimeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n                <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hook:destroyed'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>owners<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">forceRender</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">renderCompleted</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> owners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token comment\">// 触发组件强制更新的函数</span>\n                    <span class=\"token punctuation\">(</span>owners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 保证resolve函数只运行一次</span>\n<span class=\"token keyword\">var</span> resolve <span class=\"token operator\">=</span> <span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 创建异步组件并保存在resolved中</span>\nfactory<span class=\"token punctuation\">.</span>resolved <span class=\"token operator\">=</span> <span class=\"token function\">ensureCtor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果不是同步的，则进行强制更新 </span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">forceRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    owners<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 保证reject函数只运行一次</span>\n            <span class=\"token keyword\">var</span> reject <span class=\"token operator\">=</span> <span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"Failed to resolve async component: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                    <span class=\"token punctuation\">(</span>reason <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nReason: \"</span> <span class=\"token operator\">+</span> reason<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 如果渲染错误切定义了加载失败的组件，则显示错误</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>errorComp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    factory<span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">forceRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//执行工厂函数(异步函数)</span>\n            <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果函数返回的结果为一个promise对象</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// () => Promise</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                     <span class=\"token comment\">// 如果加载成功运行定义的resolve函数</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> \n            <span class=\"token punctuation\">&#125;</span>\n            sync <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// return in case resolved synchronously</span>\n            <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span>loading\n                <span class=\"token operator\">?</span> factory<span class=\"token punctuation\">.</span>loadingComp\n                <span class=\"token operator\">:</span> factory<span class=\"token punctuation\">.</span>resolved\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可见以上写法的逻辑已经梳理完毕了，但是还有高级异步组件的写法如下:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AsyncComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 需要加载的组件 (应该是一个 `Promise` 对象)</span>\n  <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./MyComponent.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 异步组件加载时使用的组件</span>\n  <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> LoadingComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 加载失败时使用的组件</span>\n  <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> ErrorComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span>\n  <span class=\"token literal-property property\">delay</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 如果提供了超时时间且组件加载也超时了，</span>\n  <span class=\"token comment\">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span>\n  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到多了很多配置条件，可以在异步的不同状态下分别加载不同的页面，然后可以看一下Vue是怎么处理这一块的逻辑。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// () => Promise</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 如果component是promise对象</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//加载异步组件成功的话进入resolve回调，失败的话进入reject回调</span>\n    res<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 如果定义了error</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 调用ensureCtor方法传入错误组件和基本配置来创建组件并添加缓存</span>\n      factory<span class=\"token punctuation\">.</span>errorComp <span class=\"token operator\">=</span> <span class=\"token function\">ensureCtor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 如果定义了loading</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 创建loading组件并加入缓存</span>\n      factory<span class=\"token punctuation\">.</span>loadingComp <span class=\"token operator\">=</span> <span class=\"token function\">ensureCtor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 如果没有设置delay的时间，直接设置loading的状态为true</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        factory<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 如果有delay的话，就用setTimeout函数使得在多少时间后触发强制更新来渲染loading组件</span>\n        timerLoading <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          timerLoading <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            factory<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n            <span class=\"token comment\">// 强制更新并传入并未渲染完成的参数</span>\n            <span class=\"token function\">forceRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">||</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 如果定义了timeout</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      timerTimeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        timerTimeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 进入到reject回调函数 </span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout ('</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'ms)'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6\">首先请参考Vue异步组件的用法</a></p>\n<h2 id=\"1-用例分析\"><a href=\"#1-用例分析\" class=\"headerlink\" title=\"1.用例分析\"></a>1.用例分析</h2><p>此处写一个Vue异步组件的例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async-example'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 向 `resolve` 回调传递组件定义</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;div>I am async!&lt;/div>'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可见此处传入了两个参数，一个是组件的名字，一个是工厂函数，工厂函数接受两个参数（resolve， reject），工厂函数会收到一个<code>resolve</code>回调，这个回调函数会在你从服务器得到组件定义的时候被调用。也可以调用<code>reject(reason)</code>来表示加载失败。<br>不想这个异步组件实现的具体的逻辑，先考虑一下大方向：</p>\n<p>1.怎么判断这是一个异步组件</p>\n<p>2.在确定是异步组件以后，要调用异步函数来渲染和生成组件并将结果保存，并创建异步组件的占位符</p>\n<p>3.异步函数运行完以后，通过watcher来进行组件更新</p>\n<h2 id=\"2-具体逻辑解释\"><a href=\"#2-具体逻辑解释\" class=\"headerlink\" title=\"2.具体逻辑解释\"></a>2.具体逻辑解释</h2><p>如果不是html标签，都会进入到createComponent函数中来创建VNode节点，那么异步组件肯定会进入到该函数中，该函数做三件事情</p>\n<p>1）判断组件函数，然后进入不同的函数来进行相应的逻辑处理，如果传入的参数是对象，则通过Ctor = baseCtor.extend(Ctor)构造子类构造函数，如果是函数，说明传入的是异步组件，则进入到resolveAsyncComponent函数中</p>\n<p>2）安装组件的钩子函数</p>\n<p>3）通过以上函数完成相应组件的配置，从而根据这些配置来实例化VNode节点</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">Ctor<span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">,</span>\n        context<span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">,</span>\n        tag</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">var</span> baseCtor <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>_base<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 自定义组件(异步组件除外)均会传入一个对象</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 构造子类构造函数</span>\n            Ctor <span class=\"token operator\">=</span> baseCtor<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 如果既不是对象也不是函数 则给出\"无效组件\"的提示</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Ctor <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Component definition: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">var</span> asyncFactory<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过cid属性是否未定义来判断是否为异步组件</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">.</span>cid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            asyncFactory <span class=\"token operator\">=</span> Ctor<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 正式进入处理异步组件的函数</span>\n            Ctor <span class=\"token operator\">=</span> <span class=\"token function\">resolveAsyncComponent</span><span class=\"token punctuation\">(</span>asyncFactory<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Ctor <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 创建异步组件的占位符</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">createAsyncPlaceholder</span><span class=\"token punctuation\">(</span>\n                    asyncFactory<span class=\"token punctuation\">,</span>\n                    data<span class=\"token punctuation\">,</span>\n                    context<span class=\"token punctuation\">,</span>\n                    children<span class=\"token punctuation\">,</span>\n                    tag\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 安装组件的钩子函数</span>\n        <span class=\"token function\">installComponentHooks</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// return a placeholder vnode</span>\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> Ctor<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> tag<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建VNode节点</span>\n        <span class=\"token keyword\">var</span> vnode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token string\">\"vue-component-\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>Ctor<span class=\"token punctuation\">.</span>cid<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">Ctor</span><span class=\"token operator\">:</span> Ctor<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">propsData</span><span class=\"token operator\">:</span> propsData<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">listeners</span><span class=\"token operator\">:</span> listeners<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> tag<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> children <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            asyncFactory\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> vnode\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于此处重点讲解异步组件的逻辑，那么就重点看下resolveAsyncComponent的逻辑，</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">resolveAsyncComponent</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">factory<span class=\"token punctuation\">,</span>\n        baseCtor</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>errorComp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span>errorComp\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// 此时返回缓存的组件</span>\n            <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span>resolved\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>owner <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>owners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">var</span> owners <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span>owners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> sync <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> timerLoading <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> timerTimeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n                <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hook:destroyed'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>owners<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">forceRender</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">renderCompleted</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> owners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token comment\">// 触发组件强制更新的函数</span>\n                    <span class=\"token punctuation\">(</span>owners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 保证resolve函数只运行一次</span>\n<span class=\"token keyword\">var</span> resolve <span class=\"token operator\">=</span> <span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 创建异步组件并保存在resolved中</span>\nfactory<span class=\"token punctuation\">.</span>resolved <span class=\"token operator\">=</span> <span class=\"token function\">ensureCtor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 如果不是同步的，则进行强制更新 </span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">forceRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    owners<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 保证reject函数只运行一次</span>\n            <span class=\"token keyword\">var</span> reject <span class=\"token operator\">=</span> <span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"Failed to resolve async component: \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                    <span class=\"token punctuation\">(</span>reason <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nReason: \"</span> <span class=\"token operator\">+</span> reason<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 如果渲染错误切定义了加载失败的组件，则显示错误</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>errorComp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    factory<span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">forceRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//执行工厂函数(异步函数)</span>\n            <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果函数返回的结果为一个promise对象</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// () => Promise</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                     <span class=\"token comment\">// 如果加载成功运行定义的resolve函数</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span> \n            <span class=\"token punctuation\">&#125;</span>\n            sync <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// return in case resolved synchronously</span>\n            <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span>loading\n                <span class=\"token operator\">?</span> factory<span class=\"token punctuation\">.</span>loadingComp\n                <span class=\"token operator\">:</span> factory<span class=\"token punctuation\">.</span>resolved\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可见以上写法的逻辑已经梳理完毕了，但是还有高级异步组件的写法如下:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AsyncComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 需要加载的组件 (应该是一个 `Promise` 对象)</span>\n  <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./MyComponent.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 异步组件加载时使用的组件</span>\n  <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> LoadingComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 加载失败时使用的组件</span>\n  <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> ErrorComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span>\n  <span class=\"token literal-property property\">delay</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 如果提供了超时时间且组件加载也超时了，</span>\n  <span class=\"token comment\">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span>\n  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到多了很多配置条件，可以在异步的不同状态下分别加载不同的页面，然后可以看一下Vue是怎么处理这一块的逻辑。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// () => Promise</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 如果component是promise对象</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//加载异步组件成功的话进入resolve回调，失败的话进入reject回调</span>\n    res<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 如果定义了error</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 调用ensureCtor方法传入错误组件和基本配置来创建组件并添加缓存</span>\n      factory<span class=\"token punctuation\">.</span>errorComp <span class=\"token operator\">=</span> <span class=\"token function\">ensureCtor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 如果定义了loading</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 创建loading组件并加入缓存</span>\n      factory<span class=\"token punctuation\">.</span>loadingComp <span class=\"token operator\">=</span> <span class=\"token function\">ensureCtor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">,</span> baseCtor<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 如果没有设置delay的时间，直接设置loading的状态为true</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        factory<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 如果有delay的话，就用setTimeout函数使得在多少时间后触发强制更新来渲染loading组件</span>\n        timerLoading <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          timerLoading <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            factory<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n            <span class=\"token comment\">// 强制更新并传入并未渲染完成的参数</span>\n            <span class=\"token function\">forceRender</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">||</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 如果定义了timeout</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      timerTimeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        timerTimeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">.</span>resolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 进入到reject回调函数 </span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout ('</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'ms)'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}